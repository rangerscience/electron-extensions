"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { rpc } = require('electron-simple-rpc');
const common_1 = require("../common");
/**
 * @name createWire
 * @abstract The high order function prepare RPC calls scoped to
 * extension id and API namespace while `bindder` return a function
 * ready to call for a given method in the namespace. All kinds of APIs methods
 * can use this abstract implementation independently of the arguments
 * length and callback usage.
 * @example
 * ```ts
 * export const cookies = (extensionId: IExtension['id']) => {
 *   const bind = createWire<Methods>(Api.Cookies, extensionId);
 *
 *   return {
 *     getAll: bind(Methods.GetAll),
 *     ...,
 *   };
 * };
 * ```
 * @usage `window.chrome.cookies.getAll({ url: 'https://google.com/' }, myCallback)`
 * @param api Api enum
 * @param extensionId string
 * @returns Function
 */
exports.createWire = (api, extensionId) => {
    const scope = common_1.extensionScope(common_1.Channel.Handler, api, extensionId);
    const bindder = (method) => {
        return (...args) => {
            const callback = args.find(arg => typeof arg === 'function');
            const params = args.filter(arg => typeof arg !== 'function');
            if (callback) {
                return rpc(scope, method)(...params).then(callback);
            }
            rpc(scope, method)(...params);
        };
    };
    return bindder;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW5kZXJlci93aXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQy9DLHNDQUF5RDtBQUd6RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCRztBQUNVLFFBQUEsVUFBVSxHQUFHLENBQUksR0FBUSxFQUFFLFdBQTZCLEVBQUUsRUFBRTtJQUN2RSxNQUFNLEtBQUssR0FBRyx1QkFBYyxDQUFDLGdCQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVoRSxNQUFNLE9BQU8sR0FBRyxDQUFDLE1BQVMsRUFBRSxFQUFFO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFO1lBQ3hCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxVQUFVLENBQUMsQ0FBQztZQUM3RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssVUFBVSxDQUFDLENBQUM7WUFFN0QsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osT0FBTyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3JEO1lBRUQsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgcnBjIH0gPSByZXF1aXJlKCdlbGVjdHJvbi1zaW1wbGUtcnBjJyk7XG5pbXBvcnQgeyBleHRlbnNpb25TY29wZSwgQ2hhbm5lbCwgQXBpIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IElFeHRlbnNpb24gfSBmcm9tICcuLi9jb21tb24vdHlwZXMnO1xuXG4vKipcbiAqIEBuYW1lIGNyZWF0ZVdpcmVcbiAqIEBhYnN0cmFjdCBUaGUgaGlnaCBvcmRlciBmdW5jdGlvbiBwcmVwYXJlIFJQQyBjYWxscyBzY29wZWQgdG9cbiAqIGV4dGVuc2lvbiBpZCBhbmQgQVBJIG5hbWVzcGFjZSB3aGlsZSBgYmluZGRlcmAgcmV0dXJuIGEgZnVuY3Rpb25cbiAqIHJlYWR5IHRvIGNhbGwgZm9yIGEgZ2l2ZW4gbWV0aG9kIGluIHRoZSBuYW1lc3BhY2UuIEFsbCBraW5kcyBvZiBBUElzIG1ldGhvZHNcbiAqIGNhbiB1c2UgdGhpcyBhYnN0cmFjdCBpbXBsZW1lbnRhdGlvbiBpbmRlcGVuZGVudGx5IG9mIHRoZSBhcmd1bWVudHNcbiAqIGxlbmd0aCBhbmQgY2FsbGJhY2sgdXNhZ2UuXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGV4cG9ydCBjb25zdCBjb29raWVzID0gKGV4dGVuc2lvbklkOiBJRXh0ZW5zaW9uWydpZCddKSA9PiB7XG4gKiAgIGNvbnN0IGJpbmQgPSBjcmVhdGVXaXJlPE1ldGhvZHM+KEFwaS5Db29raWVzLCBleHRlbnNpb25JZCk7XG4gKlxuICogICByZXR1cm4ge1xuICogICAgIGdldEFsbDogYmluZChNZXRob2RzLkdldEFsbCksXG4gKiAgICAgLi4uLFxuICogICB9O1xuICogfTtcbiAqIGBgYFxuICogQHVzYWdlIGB3aW5kb3cuY2hyb21lLmNvb2tpZXMuZ2V0QWxsKHsgdXJsOiAnaHR0cHM6Ly9nb29nbGUuY29tLycgfSwgbXlDYWxsYmFjaylgXG4gKiBAcGFyYW0gYXBpIEFwaSBlbnVtXG4gKiBAcGFyYW0gZXh0ZW5zaW9uSWQgc3RyaW5nXG4gKiBAcmV0dXJucyBGdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlV2lyZSA9IDxUPihhcGk6IEFwaSwgZXh0ZW5zaW9uSWQ6IElFeHRlbnNpb25bJ2lkJ10pID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBleHRlbnNpb25TY29wZShDaGFubmVsLkhhbmRsZXIsIGFwaSwgZXh0ZW5zaW9uSWQpO1xuXG4gIGNvbnN0IGJpbmRkZXIgPSAobWV0aG9kOiBUKSA9PiB7XG4gICAgcmV0dXJuICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSBhcmdzLmZpbmQoYXJnID0+IHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpO1xuICAgICAgY29uc3QgcGFyYW1zID0gYXJncy5maWx0ZXIoYXJnID0+IHR5cGVvZiBhcmcgIT09ICdmdW5jdGlvbicpO1xuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHJwYyhzY29wZSwgbWV0aG9kKSguLi5wYXJhbXMpLnRoZW4oY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBycGMoc2NvcGUsIG1ldGhvZCkoLi4ucGFyYW1zKTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBiaW5kZGVyO1xufTtcbiJdfQ==