const url = require('url');
const constants = require('../common/constants');
const isBackgroundPage = process.argv.indexOf('--electron-chrome-extension-background-page') !== -1;
// Mixmax detect the navigator user agent for his own desktop app
// and add a behvior that is not compliant with our mechanism.
// Electron itself isn't responsible for navigator behavior
// as the Electron team don't overwrite any of those APIs for now.
// ref: https://github.com/electron/electron/issues/11290#issuecomment-362301961
Object.defineProperty(window.navigator, 'userAgent', {
    value: window.navigator.userAgent.replace(/Electron\/\S*\s/, ''),
    configurable: false,
    writable: false,
});
const { protocol, hostname } = url.parse(window.location.href);
if (protocol === `${constants.EXTENSION_PROTOCOL}:`) {
    // Add implementations of chrome API.
    require('./chrome-api').injectTo(hostname, isBackgroundPage, window);
    process.once('loaded', function () {
        delete global.require;
        delete global.module;
        // delete global.process
        delete global.Buffer;
        delete global.setImmediate;
        delete global.clearImmediate;
        delete global.global;
    });
}
else {
    // native window open workaround
    const { ipcRendererInternal } = require('@electron/internal/renderer/ipc-renderer-internal');
    const { guestInstanceId, openerId } = process;
    require('./window-setup')(window, ipcRendererInternal, guestInstanceId, openerId);
    // end workaround
    require('./xhr').default(window);
    require('./injectors/content-scripts-injector');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW5kZXJlci9pbml0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNqRCxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLDZDQUE2QyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFcEcsaUVBQWlFO0FBQ2pFLDhEQUE4RDtBQUM5RCwyREFBMkQ7QUFDM0Qsa0VBQWtFO0FBQ2xFLGdGQUFnRjtBQUNoRixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFO0lBQ25ELEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDO0lBQ2hFLFlBQVksRUFBRSxLQUFLO0lBQ25CLFFBQVEsRUFBRSxLQUFLO0NBQ2hCLENBQUMsQ0FBQztBQUVILE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRS9ELElBQUksUUFBUSxLQUFLLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixHQUFHLEVBQUU7SUFDbkQscUNBQXFDO0lBQ3JDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRXJFLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ3JCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQTtRQUNyQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUE7UUFDcEIsd0JBQXdCO1FBQ3hCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQTtRQUNwQixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUE7UUFDMUIsT0FBTyxNQUFNLENBQUMsY0FBYyxDQUFBO1FBQzVCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUN0QixDQUFDLENBQUMsQ0FBQTtDQUNIO0tBQU07SUFDTCxnQ0FBZ0M7SUFDaEMsTUFBTSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsT0FBTyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7SUFDN0YsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFFOUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNsRixpQkFBaUI7SUFFakIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqQyxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQTtDQUNoRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29tbW9uL2NvbnN0YW50cycpO1xuY29uc3QgaXNCYWNrZ3JvdW5kUGFnZSA9IHByb2Nlc3MuYXJndi5pbmRleE9mKCctLWVsZWN0cm9uLWNocm9tZS1leHRlbnNpb24tYmFja2dyb3VuZC1wYWdlJykgIT09IC0xO1xuXG4vLyBNaXhtYXggZGV0ZWN0IHRoZSBuYXZpZ2F0b3IgdXNlciBhZ2VudCBmb3IgaGlzIG93biBkZXNrdG9wIGFwcFxuLy8gYW5kIGFkZCBhIGJlaHZpb3IgdGhhdCBpcyBub3QgY29tcGxpYW50IHdpdGggb3VyIG1lY2hhbmlzbS5cbi8vIEVsZWN0cm9uIGl0c2VsZiBpc24ndCByZXNwb25zaWJsZSBmb3IgbmF2aWdhdG9yIGJlaGF2aW9yXG4vLyBhcyB0aGUgRWxlY3Ryb24gdGVhbSBkb24ndCBvdmVyd3JpdGUgYW55IG9mIHRob3NlIEFQSXMgZm9yIG5vdy5cbi8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uL2VsZWN0cm9uL2lzc3Vlcy8xMTI5MCNpc3N1ZWNvbW1lbnQtMzYyMzAxOTYxXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93Lm5hdmlnYXRvciwgJ3VzZXJBZ2VudCcsIHtcbiAgdmFsdWU6IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnJlcGxhY2UoL0VsZWN0cm9uXFwvXFxTKlxccy8sICcnKSxcbiAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgd3JpdGFibGU6IGZhbHNlLFxufSk7XG5cbmNvbnN0IHsgcHJvdG9jb2wsIGhvc3RuYW1lIH0gPSB1cmwucGFyc2Uod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG5pZiAocHJvdG9jb2wgPT09IGAke2NvbnN0YW50cy5FWFRFTlNJT05fUFJPVE9DT0x9OmApIHtcbiAgLy8gQWRkIGltcGxlbWVudGF0aW9ucyBvZiBjaHJvbWUgQVBJLlxuICByZXF1aXJlKCcuL2Nocm9tZS1hcGknKS5pbmplY3RUbyhob3N0bmFtZSwgaXNCYWNrZ3JvdW5kUGFnZSwgd2luZG93KTtcblxuICBwcm9jZXNzLm9uY2UoJ2xvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWxldGUgZ2xvYmFsLnJlcXVpcmVcbiAgICBkZWxldGUgZ2xvYmFsLm1vZHVsZVxuICAgIC8vIGRlbGV0ZSBnbG9iYWwucHJvY2Vzc1xuICAgIGRlbGV0ZSBnbG9iYWwuQnVmZmVyXG4gICAgZGVsZXRlIGdsb2JhbC5zZXRJbW1lZGlhdGVcbiAgICBkZWxldGUgZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICAgZGVsZXRlIGdsb2JhbC5nbG9iYWxcbiAgfSlcbn0gZWxzZSB7XG4gIC8vIG5hdGl2ZSB3aW5kb3cgb3BlbiB3b3JrYXJvdW5kXG4gIGNvbnN0IHsgaXBjUmVuZGVyZXJJbnRlcm5hbCB9ID0gcmVxdWlyZSgnQGVsZWN0cm9uL2ludGVybmFsL3JlbmRlcmVyL2lwYy1yZW5kZXJlci1pbnRlcm5hbCcpO1xuICBjb25zdCB7IGd1ZXN0SW5zdGFuY2VJZCwgb3BlbmVySWQgfSA9IHByb2Nlc3M7XG5cbiAgcmVxdWlyZSgnLi93aW5kb3ctc2V0dXAnKSh3aW5kb3csIGlwY1JlbmRlcmVySW50ZXJuYWwsIGd1ZXN0SW5zdGFuY2VJZCwgb3BlbmVySWQpO1xuICAvLyBlbmQgd29ya2Fyb3VuZFxuXG4gIHJlcXVpcmUoJy4veGhyJykuZGVmYXVsdCh3aW5kb3cpO1xuXG4gIHJlcXVpcmUoJy4vaW5qZWN0b3JzL2NvbnRlbnQtc2NyaXB0cy1pbmplY3RvcicpXG59XG4iXX0=