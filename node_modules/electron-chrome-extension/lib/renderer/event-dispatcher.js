"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const common_1 = require("../common");
const utils_1 = require("../common/utils");
/**
 * @name subscribeAndForwardEvents
 * @abstract Meta event handler that dispatch emitted events from the main
 * into the given Event API channel (e.g: `chrome.tabs.onCreated`).
 * This allow us to keep the renderer agnostic of the APIs events, to be DRY and
 * subscribe only one time per renderer preventing overflow the Electron IPC
 * @example
 * ```ts
 * // main.ts
 *
 * sendEventToExtensions(
 *   CookiesEvents.OnChanged,
 *   {
 *     cookie,
 *     cause,
 *     removed,
 *   }
 * )
 *
 * // renderer.ts
 *
 * chrome.cookies = {
 *   ...,
 *   onChanged: new Event(),
 * }
 * ```
 * will dispatch the event payload to `chrome.cookies.onChanged` listeners
 * @param context the Chrome context (available via `window.chrome`)
 * @returns void
 */
const subscribeAndForwardEvents = (context) => electron_1.ipcRenderer.on(common_1.Channel.Event, (_, { channel, payload }) => {
    const targetedEvent = channel.split('.')
        .reduce(
    // tslint:disable-next-line: no-parameter-reassignment
    (event, path) => event = event[path], context);
    targetedEvent.emit(...(utils_1.isIterable(payload) ? payload : [payload]));
});
exports.default = subscribeAndForwardEvents;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtZGlzcGF0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW5kZXJlci9ldmVudC1kaXNwYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXVDO0FBRXZDLHNDQUFvQztBQUVwQywyQ0FBNkM7QUFFN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNkJHO0FBRUgsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLE9BQVksRUFBRSxFQUFFLENBQ2pELHNCQUFXLENBQUMsRUFBRSxDQUNaLGdCQUFPLENBQUMsS0FBSyxFQUNiLENBQUMsQ0FBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQXlCLEVBQUUsRUFBRTtJQUNqRSxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztTQUNyQyxNQUFNO0lBQ0wsc0RBQXNEO0lBQ3RELENBQUMsS0FBVSxFQUFFLElBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDakQsT0FBTyxDQUNSLENBQUM7SUFFSixhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLENBQUMsQ0FDRixDQUFDO0FBRUosa0JBQWUseUJBQXlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpcGNSZW5kZXJlciB9IGZyb20gJ2VsZWN0cm9uJztcblxuaW1wb3J0IHsgQ2hhbm5lbCB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBFeHRlbnNpb25FdmVudE1lc3NhZ2UgfSBmcm9tICcuLi9jb21tb24vdHlwZXMnO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL2NvbW1vbi91dGlscyc7XG5cbi8qKlxuICogQG5hbWUgc3Vic2NyaWJlQW5kRm9yd2FyZEV2ZW50c1xuICogQGFic3RyYWN0IE1ldGEgZXZlbnQgaGFuZGxlciB0aGF0IGRpc3BhdGNoIGVtaXR0ZWQgZXZlbnRzIGZyb20gdGhlIG1haW5cbiAqIGludG8gdGhlIGdpdmVuIEV2ZW50IEFQSSBjaGFubmVsIChlLmc6IGBjaHJvbWUudGFicy5vbkNyZWF0ZWRgKS5cbiAqIFRoaXMgYWxsb3cgdXMgdG8ga2VlcCB0aGUgcmVuZGVyZXIgYWdub3N0aWMgb2YgdGhlIEFQSXMgZXZlbnRzLCB0byBiZSBEUlkgYW5kXG4gKiBzdWJzY3JpYmUgb25seSBvbmUgdGltZSBwZXIgcmVuZGVyZXIgcHJldmVudGluZyBvdmVyZmxvdyB0aGUgRWxlY3Ryb24gSVBDXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIC8vIG1haW4udHNcbiAqXG4gKiBzZW5kRXZlbnRUb0V4dGVuc2lvbnMoXG4gKiAgIENvb2tpZXNFdmVudHMuT25DaGFuZ2VkLFxuICogICB7XG4gKiAgICAgY29va2llLFxuICogICAgIGNhdXNlLFxuICogICAgIHJlbW92ZWQsXG4gKiAgIH1cbiAqIClcbiAqXG4gKiAvLyByZW5kZXJlci50c1xuICpcbiAqIGNocm9tZS5jb29raWVzID0ge1xuICogICAuLi4sXG4gKiAgIG9uQ2hhbmdlZDogbmV3IEV2ZW50KCksXG4gKiB9XG4gKiBgYGBcbiAqIHdpbGwgZGlzcGF0Y2ggdGhlIGV2ZW50IHBheWxvYWQgdG8gYGNocm9tZS5jb29raWVzLm9uQ2hhbmdlZGAgbGlzdGVuZXJzXG4gKiBAcGFyYW0gY29udGV4dCB0aGUgQ2hyb21lIGNvbnRleHQgKGF2YWlsYWJsZSB2aWEgYHdpbmRvdy5jaHJvbWVgKVxuICogQHJldHVybnMgdm9pZFxuICovXG5cbmNvbnN0IHN1YnNjcmliZUFuZEZvcndhcmRFdmVudHMgPSAoY29udGV4dDogYW55KSA9PlxuICBpcGNSZW5kZXJlci5vbihcbiAgICBDaGFubmVsLkV2ZW50LFxuICAgIChfOiBFbGVjdHJvbi5FdmVudCwgeyBjaGFubmVsLCBwYXlsb2FkIH06IEV4dGVuc2lvbkV2ZW50TWVzc2FnZSkgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0ZWRFdmVudCA9IGNoYW5uZWwuc3BsaXQoJy4nKVxuICAgICAgICAucmVkdWNlKFxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tcGFyYW1ldGVyLXJlYXNzaWdubWVudFxuICAgICAgICAgIChldmVudDogYW55LCBwYXRoOiBzdHJpbmcpID0+IGV2ZW50ID0gZXZlbnRbcGF0aF0sXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgKTtcblxuICAgICAgdGFyZ2V0ZWRFdmVudC5lbWl0KC4uLihpc0l0ZXJhYmxlKHBheWxvYWQpID8gcGF5bG9hZCA6IFtwYXlsb2FkXSkpO1xuICAgIH1cbiAgKTtcblxuZXhwb3J0IGRlZmF1bHQgc3Vic2NyaWJlQW5kRm9yd2FyZEV2ZW50cztcbiJdfQ==