"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../common/utils");
// Proxy for log functions/properties calls in a given context
/**
 * @name loggingProxy
 * @abstract This recursive proxy log function calls and property access
 * for debugging purpose
 * @example
 * ```ts
 * // somewhere in the extension codebase
 * chrome.cookies.getAll({ url: 'google.com' }, myCallback)
 *
 * // in the renderer devtool console
 * (log) chrome.cookies.getAll - { url: 'google.com' } myCallback - [...resultCookies]
 * ```
 * @param context object
 */
const handler = {
    get: (apis, prop) => {
        if (!Boolean(apis.__path)) {
            apis.__path = 'chrome';
        }
        if (apis[prop] && typeof apis[prop] === 'object') {
            apis[prop].__path = `${apis.__path}.${prop}`;
            return new Proxy(apis[prop], handler);
        }
        if (typeof apis[prop] === 'function') {
            return (...args) => {
                if (args.filter(String).length > 0) {
                    const callResult = apis[prop](...args);
                    if (typeof callResult === 'object') {
                        callResult.__path = callResult.constructor.name.toLowerCase();
                        return new Proxy(callResult, handler);
                    }
                    utils_1.log(`${apis.__path}.${prop} `, ...args, callResult);
                    return callResult;
                }
                const result = apis[prop]();
                if (result && result.constructor.name.toLowerCase() === 'object') {
                    result.__path = result.constructor.name.toLowerCase();
                    return new Proxy(result, handler);
                }
                utils_1.log(`${apis.__path}.${prop} `, result);
                return result;
            };
        }
        if (['string', 'number'].includes(typeof apis[prop])) {
            const result = apis[prop];
            utils_1.log(`${apis.__path}.${prop} `, result);
            return result;
        }
        return apis[prop];
    },
};
exports.loggingProxy = (context) => new Proxy(context, handler);
exports.default = exports.loggingProxy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW5kZXJlci9sb2dnaW5nLXByb3h5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQXNDO0FBRXRDLDhEQUE4RDtBQUM5RDs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUgsTUFBTSxPQUFPLEdBQUc7SUFDZCxHQUFHLEVBQUUsQ0FBQyxJQUFTLEVBQUUsSUFBWSxFQUFPLEVBQUU7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7U0FDeEI7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFLENBQUM7WUFDN0MsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDdkM7UUFFRCxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTtZQUNwQyxPQUFPLENBQUMsR0FBRyxJQUFXLEVBQUUsRUFBRTtnQkFDeEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ2xDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO29CQUN2QyxJQUFJLE9BQU8sVUFBVSxLQUFLLFFBQVEsRUFBRTt3QkFDbEMsVUFBVSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQzt3QkFDOUQsT0FBTyxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7cUJBQ3ZDO29CQUVELFdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7b0JBRXBELE9BQU8sVUFBVSxDQUFDO2lCQUNuQjtnQkFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFFNUIsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxFQUFFO29CQUNoRSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO29CQUN0RCxPQUFPLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztpQkFDbkM7Z0JBRUQsV0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFFdkMsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQyxDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ3BELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQixXQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRXZDLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQixDQUFDO0NBQ0YsQ0FBQztBQUVXLFFBQUEsWUFBWSxHQUFHLENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFMUUsa0JBQWUsb0JBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZyB9IGZyb20gJy4uL2NvbW1vbi91dGlscyc7XG5cbi8vIFByb3h5IGZvciBsb2cgZnVuY3Rpb25zL3Byb3BlcnRpZXMgY2FsbHMgaW4gYSBnaXZlbiBjb250ZXh0XG4vKipcbiAqIEBuYW1lIGxvZ2dpbmdQcm94eVxuICogQGFic3RyYWN0IFRoaXMgcmVjdXJzaXZlIHByb3h5IGxvZyBmdW5jdGlvbiBjYWxscyBhbmQgcHJvcGVydHkgYWNjZXNzXG4gKiBmb3IgZGVidWdnaW5nIHB1cnBvc2VcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogLy8gc29tZXdoZXJlIGluIHRoZSBleHRlbnNpb24gY29kZWJhc2VcbiAqIGNocm9tZS5jb29raWVzLmdldEFsbCh7IHVybDogJ2dvb2dsZS5jb20nIH0sIG15Q2FsbGJhY2spXG4gKlxuICogLy8gaW4gdGhlIHJlbmRlcmVyIGRldnRvb2wgY29uc29sZVxuICogKGxvZykgY2hyb21lLmNvb2tpZXMuZ2V0QWxsIC0geyB1cmw6ICdnb29nbGUuY29tJyB9IG15Q2FsbGJhY2sgLSBbLi4ucmVzdWx0Q29va2llc11cbiAqIGBgYFxuICogQHBhcmFtIGNvbnRleHQgb2JqZWN0XG4gKi9cblxuY29uc3QgaGFuZGxlciA9IHtcbiAgZ2V0OiAoYXBpczogYW55LCBwcm9wOiBzdHJpbmcpOiBhbnkgPT4ge1xuICAgIGlmICghQm9vbGVhbihhcGlzLl9fcGF0aCkpIHtcbiAgICAgIGFwaXMuX19wYXRoID0gJ2Nocm9tZSc7XG4gICAgfVxuXG4gICAgaWYgKGFwaXNbcHJvcF0gJiYgdHlwZW9mIGFwaXNbcHJvcF0gPT09ICdvYmplY3QnKSB7XG4gICAgICBhcGlzW3Byb3BdLl9fcGF0aCA9IGAke2FwaXMuX19wYXRofS4ke3Byb3B9YDtcbiAgICAgIHJldHVybiBuZXcgUHJveHkoYXBpc1twcm9wXSwgaGFuZGxlcik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhcGlzW3Byb3BdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIGlmIChhcmdzLmZpbHRlcihTdHJpbmcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBjYWxsUmVzdWx0ID0gYXBpc1twcm9wXSguLi5hcmdzKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxSZXN1bHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjYWxsUmVzdWx0Ll9fcGF0aCA9IGNhbGxSZXN1bHQuY29uc3RydWN0b3IubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm94eShjYWxsUmVzdWx0LCBoYW5kbGVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsb2coYCR7YXBpcy5fX3BhdGh9LiR7cHJvcH0gYCwgLi4uYXJncywgY2FsbFJlc3VsdCk7XG5cbiAgICAgICAgICByZXR1cm4gY2FsbFJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGFwaXNbcHJvcF0oKTtcblxuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5jb25zdHJ1Y3Rvci5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fcGF0aCA9IHJlc3VsdC5jb25zdHJ1Y3Rvci5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm94eShyZXN1bHQsIGhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nKGAke2FwaXMuX19wYXRofS4ke3Byb3B9IGAsIHJlc3VsdCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluY2x1ZGVzKHR5cGVvZiBhcGlzW3Byb3BdKSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXBpc1twcm9wXTtcbiAgICAgIGxvZyhgJHthcGlzLl9fcGF0aH0uJHtwcm9wfSBgLCByZXN1bHQpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBhcGlzW3Byb3BdO1xuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ2dpbmdQcm94eSA9IChjb250ZXh0OiBhbnkpID0+IG5ldyBQcm94eShjb250ZXh0LCBoYW5kbGVyKTtcblxuZXhwb3J0IGRlZmF1bHQgbG9nZ2luZ1Byb3h5O1xuIl19