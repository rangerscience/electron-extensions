// Implementation of chrome.i18n.getMessage
// https://developer.chrome.com/extensions/i18n#method-getMessage
//
// Does not implement predefined messages:
// https://developer.chrome.com/extensions/i18n#overview-predefined
const { ipcRenderer } = require('electron');
const fs = require('fs');
const path = require('path');
const constants = require('../../common/constants');
let metadata;
const getExtensionMetadata = (extensionId) => {
    if (!metadata) {
        metadata = ipcRenderer.sendSync(path.I18N_MANIFEST, extensionId);
    }
    return metadata;
};
const getMessagesPath = (extensionId, language) => {
    const metadata = getExtensionMetadata(extensionId);
    const defaultLocale = metadata.default_locale || 'en';
    const localesDirectory = path.join(metadata.srcDirectory, '_locales');
    let messagesPath = path.join(localesDirectory, language, 'messages.json');
    if (!fs.statSyncNoException(messagesPath)) {
        messagesPath = path.join(localesDirectory, defaultLocale, 'messages.json');
    }
    return messagesPath;
};
const getMessages = (extensionId, language) => {
    try {
        const messagesPath = getMessagesPath(extensionId, language);
        return JSON.parse(fs.readFileSync(messagesPath)) || {};
    }
    catch (error) {
        return {};
    }
};
const getLanguage = () => {
    return navigator.language.replace(/-.*$/, '').toLowerCase();
};
const replaceNumberedSubstitutions = (message, substitutions) => {
    return message.replace(/\$(\d+)/, (_, number) => {
        const index = parseInt(number, 10) - 1;
        return substitutions[index] || '';
    });
};
const replacePlaceholders = (message, placeholders, substitutions) => {
    if (typeof substitutions === 'string') {
        substitutions = [substitutions];
    }
    if (!Array.isArray(substitutions)) {
        substitutions = [];
    }
    if (placeholders) {
        Object.keys(placeholders).forEach((name) => {
            let { content } = placeholders[name];
            content = replaceNumberedSubstitutions(content, substitutions);
            message = message.replace(new RegExp(`\\$${name}\\$`, 'gi'), content);
        });
    }
    return replaceNumberedSubstitutions(message, substitutions);
};
const getMessage = (extensionId, messageName, substitutions) => {
    const messages = getMessages(extensionId, getLanguage());
    if (messages.hasOwnProperty(messageName)) {
        const { message, placeholders } = messages[messageName];
        return replacePlaceholders(message, placeholders, substitutions);
    }
};
exports.setup = (extensionId) => {
    return {
        getMessage(messageName, substitutions) {
            return getMessage(extensionId, messageName, substitutions);
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZW5kZXJlci9hcGkvaTE4bi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQ0FBMkM7QUFDM0MsaUVBQWlFO0FBQ2pFLEVBQUU7QUFDRiwwQ0FBMEM7QUFDMUMsbUVBQW1FO0FBRW5FLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDM0MsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3hCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM1QixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUlwRCxJQUFJLFFBQVEsQ0FBQTtBQUVaLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRTtJQUMzQyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQTtLQUNqRTtJQUNELE9BQU8sUUFBUSxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQUVELE1BQU0sZUFBZSxHQUFHLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxFQUFFO0lBQ2hELE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ2xELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFBO0lBQ3JELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQ3JFLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFBO0lBQ3pFLElBQUksQ0FBQyxFQUFF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QUFDLFdBQVcsRUFBRSxhQUFhO1lBQ25DLE9BQU8sVUFBVSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUE7UUFDNUQsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBsZW1lbnRhdGlvbiBvZiBjaHJvbWUuaTE4bi5nZXRNZXNzYWdlXG4vLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvaTE4biNtZXRob2QtZ2V0TWVzc2FnZVxuLy9cbi8vIERvZXMgbm90IGltcGxlbWVudCBwcmVkZWZpbmVkIG1lc3NhZ2VzOlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL2kxOG4jb3ZlcnZpZXctcHJlZGVmaW5lZFxuXG5jb25zdCB7IGlwY1JlbmRlcmVyIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJylcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnKTtcblxuXG5cbmxldCBtZXRhZGF0YVxuXG5jb25zdCBnZXRFeHRlbnNpb25NZXRhZGF0YSA9IChleHRlbnNpb25JZCkgPT4ge1xuICBpZiAoIW1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEgPSBpcGNSZW5kZXJlci5zZW5kU3luYyhwYXRoLkkxOE5fTUFOSUZFU1QsIGV4dGVuc2lvbklkKVxuICB9XG4gIHJldHVybiBtZXRhZGF0YVxufVxuXG5jb25zdCBnZXRNZXNzYWdlc1BhdGggPSAoZXh0ZW5zaW9uSWQsIGxhbmd1YWdlKSA9PiB7XG4gIGNvbnN0IG1ldGFkYXRhID0gZ2V0RXh0ZW5zaW9uTWV0YWRhdGEoZXh0ZW5zaW9uSWQpXG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBtZXRhZGF0YS5kZWZhdWx0X2xvY2FsZSB8fCAnZW4nXG4gIGNvbnN0IGxvY2FsZXNEaXJlY3RvcnkgPSBwYXRoLmpvaW4obWV0YWRhdGEuc3JjRGlyZWN0b3J5LCAnX2xvY2FsZXMnKVxuICBsZXQgbWVzc2FnZXNQYXRoID0gcGF0aC5qb2luKGxvY2FsZXNEaXJlY3RvcnksIGxhbmd1YWdlLCAnbWVzc2FnZXMuanNvbicpXG4gIGlmICghZnMuc3RhdFN5bmNOb0V4Y2VwdGlvbihtZXNzYWdlc1BhdGgpKSB7XG4gICAgbWVzc2FnZXNQYXRoID0gcGF0aC5qb2luKGxvY2FsZXNEaXJlY3RvcnksIGRlZmF1bHRMb2NhbGUsICdtZXNzYWdlcy5qc29uJylcbiAgfVxuICByZXR1cm4gbWVzc2FnZXNQYXRoXG59XG5cbmNvbnN0IGdldE1lc3NhZ2VzID0gKGV4dGVuc2lvbklkLCBsYW5ndWFnZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IG1lc3NhZ2VzUGF0aCA9IGdldE1lc3NhZ2VzUGF0aChleHRlbnNpb25JZCwgbGFuZ3VhZ2UpXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKG1lc3NhZ2VzUGF0aCkpIHx8IHt9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbn1cblxuY29uc3QgZ2V0TGFuZ3VhZ2UgPSAoKSA9PiB7XG4gIHJldHVybiBuYXZpZ2F0b3IubGFuZ3VhZ2UucmVwbGFjZSgvLS4qJC8sICcnKS50b0xvd2VyQ2FzZSgpXG59XG5cbmNvbnN0IHJlcGxhY2VOdW1iZXJlZFN1YnN0aXR1dGlvbnMgPSAobWVzc2FnZSwgc3Vic3RpdHV0aW9ucykgPT4ge1xuICByZXR1cm4gbWVzc2FnZS5yZXBsYWNlKC9cXCQoXFxkKykvLCAoXywgbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBwYXJzZUludChudW1iZXIsIDEwKSAtIDFcbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uc1tpbmRleF0gfHwgJydcbiAgfSlcbn1cblxuY29uc3QgcmVwbGFjZVBsYWNlaG9sZGVycyA9IChtZXNzYWdlLCBwbGFjZWhvbGRlcnMsIHN1YnN0aXR1dGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBzdWJzdGl0dXRpb25zID09PSAnc3RyaW5nJykge1xuICAgIHN1YnN0aXR1dGlvbnMgPSBbc3Vic3RpdHV0aW9uc11cbiAgfVxuICBpZiAoIUFycmF5LmlzQXJyYXkoc3Vic3RpdHV0aW9ucykpIHtcbiAgICBzdWJzdGl0dXRpb25zID0gW11cbiAgfVxuXG4gIGlmIChwbGFjZWhvbGRlcnMpIHtcbiAgICBPYmplY3Qua2V5cyhwbGFjZWhvbGRlcnMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGxldCB7IGNvbnRlbnQgfSA9IHBsYWNlaG9sZGVyc1tuYW1lXVxuICAgICAgY29udGVudCA9IHJlcGxhY2VOdW1iZXJlZFN1YnN0aXR1dGlvbnMoY29udGVudCwgc3Vic3RpdHV0aW9ucylcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UobmV3IFJlZ0V4cChgXFxcXCQke25hbWV9XFxcXCRgLCAnZ2knKSwgY29udGVudClcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHJlcGxhY2VOdW1iZXJlZFN1YnN0aXR1dGlvbnMobWVzc2FnZSwgc3Vic3RpdHV0aW9ucylcbn1cblxuY29uc3QgZ2V0TWVzc2FnZSA9IChleHRlbnNpb25JZCwgbWVzc2FnZU5hbWUsIHN1YnN0aXR1dGlvbnMpID0+IHtcbiAgY29uc3QgbWVzc2FnZXMgPSBnZXRNZXNzYWdlcyhleHRlbnNpb25JZCwgZ2V0TGFuZ3VhZ2UoKSlcbiAgaWYgKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KG1lc3NhZ2VOYW1lKSkge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgcGxhY2Vob2xkZXJzIH0gPSBtZXNzYWdlc1ttZXNzYWdlTmFtZV1cbiAgICByZXR1cm4gcmVwbGFjZVBsYWNlaG9sZGVycyhtZXNzYWdlLCBwbGFjZWhvbGRlcnMsIHN1YnN0aXR1dGlvbnMpXG4gIH1cbn1cblxuZXhwb3J0cy5zZXR1cCA9IChleHRlbnNpb25JZCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGdldE1lc3NhZ2UobWVzc2FnZU5hbWUsIHN1YnN0aXR1dGlvbnMpIHtcbiAgICAgIHJldHVybiBnZXRNZXNzYWdlKGV4dGVuc2lvbklkLCBtZXNzYWdlTmFtZSwgc3Vic3RpdHV0aW9ucylcbiAgICB9XG4gIH1cbn1cbiJdfQ==