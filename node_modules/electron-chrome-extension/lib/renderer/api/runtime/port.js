const { ipcRenderer } = require('electron');
const constants = require('../../../common/constants');
const { log } = require('../../../common/utils');
const Event = require('../event');
const MessageSender = require('./message-sender');
class Port {
    constructor(tabId, portId, extensionId, name, url) {
        this.tabId = tabId;
        this.portId = portId;
        this.disconnected = false;
        this.url = url;
        this.name = name;
        this.onDisconnect = new Event();
        this.onMessage = new Event();
        this.sender = new MessageSender({ tabId, extensionId, url });
        ipcRenderer.once(`${constants.PORT_DISCONNECT_}${portId}`, () => {
            this._onDisconnect();
        });
        ipcRenderer.on(`${constants.PORT_POSTMESSAGE_}${portId}`, (event, message) => {
            const sendResponse = function () { console.error('sendResponse is not implemented'); };
            // log(`emit message for port #${portId} ${name}: `, message);
            this.onMessage.emit(message, this.sender, sendResponse);
        });
    }
    disconnect() {
        if (this.disconnected)
            return;
        ipcRenderer.sendToAll(this.tabId, `${constants.PORT_DISCONNECT_}${this.portId}`);
        this._onDisconnect();
    }
    postMessage(message) {
        ipcRenderer.sendToAll(this.tabId, `${constants.PORT_POSTMESSAGE_}${this.portId}`, message);
    }
    _onDisconnect() {
        this.disconnected = true;
        ipcRenderer.removeAllListeners(`${constants.PORT_POSTMESSAGE_}${this.portId}`);
        this.onDisconnect.emit();
    }
}
const getPort = (context, tabId, portId, extensionId, name, url) => {
    const key = `${tabId}-${portId}-${extensionId}-${name}`;
    if (context.__ports.has(key)) {
        return context.__ports.get(key);
    }
    else {
        const newPort = new Port(tabId, portId, extensionId, name, url);
        context.__ports.set(key, newPort);
        return newPort;
    }
};
exports.get = (context, tabId, portId, extensionId, name, url) => getPort(context, tabId, portId, extensionId, name, url);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXJlci9hcGkvcnVudGltZS9wb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFNUMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDdkQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ2pELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsQyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUVsRCxNQUFNLElBQUk7SUFDUixZQUFZLEtBQUssRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxHQUFHO1FBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRTdELFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQzlELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDM0UsTUFBTSxZQUFZLEdBQUcsY0FBYyxPQUFPLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUM7WUFDdEYsOERBQThEO1lBQzlELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFBO1FBQ3pELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLElBQUksQ0FBQyxZQUFZO1lBQUUsT0FBTztRQUU5QixXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBTztRQUNqQixXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsV0FBVyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsU0FBUyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ2pFLE1BQU0sR0FBRyxHQUFHLEdBQUcsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFLENBQUM7SUFFeEQsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM1QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ2hDO1NBQU07UUFDTCxNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDL0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ2pDLE9BQU8sT0FBTyxDQUFBO0tBQ2Y7QUFDSCxDQUFDLENBQUE7QUFFRCxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBpcGNSZW5kZXJlciB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cycpO1xuY29uc3QgeyBsb2cgfSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbW1vbi91dGlscycpO1xuY29uc3QgRXZlbnQgPSByZXF1aXJlKCcuLi9ldmVudCcpO1xuY29uc3QgTWVzc2FnZVNlbmRlciA9IHJlcXVpcmUoJy4vbWVzc2FnZS1zZW5kZXInKTtcblxuY2xhc3MgUG9ydCB7XG4gIGNvbnN0cnVjdG9yKHRhYklkLCBwb3J0SWQsIGV4dGVuc2lvbklkLCBuYW1lLCB1cmwpIHtcbiAgICB0aGlzLnRhYklkID0gdGFiSWQ7XG4gICAgdGhpcy5wb3J0SWQgPSBwb3J0SWQ7XG4gICAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnVybCA9IHVybDtcblxuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5vbkRpc2Nvbm5lY3QgPSBuZXcgRXZlbnQoKTtcbiAgICB0aGlzLm9uTWVzc2FnZSA9IG5ldyBFdmVudCgpO1xuICAgIHRoaXMuc2VuZGVyID0gbmV3IE1lc3NhZ2VTZW5kZXIoeyB0YWJJZCwgZXh0ZW5zaW9uSWQsIHVybCB9KTtcblxuICAgIGlwY1JlbmRlcmVyLm9uY2UoYCR7Y29uc3RhbnRzLlBPUlRfRElTQ09OTkVDVF99JHtwb3J0SWR9YCwgKCkgPT4ge1xuICAgICAgdGhpcy5fb25EaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgaXBjUmVuZGVyZXIub24oYCR7Y29uc3RhbnRzLlBPUlRfUE9TVE1FU1NBR0VffSR7cG9ydElkfWAsIChldmVudCwgbWVzc2FnZSkgPT4ge1xuICAgICAgY29uc3Qgc2VuZFJlc3BvbnNlID0gZnVuY3Rpb24gKCkgeyBjb25zb2xlLmVycm9yKCdzZW5kUmVzcG9uc2UgaXMgbm90IGltcGxlbWVudGVkJykgfTtcbiAgICAgIC8vIGxvZyhgZW1pdCBtZXNzYWdlIGZvciBwb3J0ICMke3BvcnRJZH0gJHtuYW1lfTogYCwgbWVzc2FnZSk7XG4gICAgICB0aGlzLm9uTWVzc2FnZS5lbWl0KG1lc3NhZ2UsIHRoaXMuc2VuZGVyLCBzZW5kUmVzcG9uc2UpXG4gICAgfSk7XG4gIH1cblxuICBkaXNjb25uZWN0KCkge1xuICAgIGlmICh0aGlzLmRpc2Nvbm5lY3RlZCkgcmV0dXJuO1xuXG4gICAgaXBjUmVuZGVyZXIuc2VuZFRvQWxsKHRoaXMudGFiSWQsIGAke2NvbnN0YW50cy5QT1JUX0RJU0NPTk5FQ1RffSR7dGhpcy5wb3J0SWR9YCk7XG4gICAgdGhpcy5fb25EaXNjb25uZWN0KCk7XG4gIH1cblxuICBwb3N0TWVzc2FnZShtZXNzYWdlKSB7XG4gICAgaXBjUmVuZGVyZXIuc2VuZFRvQWxsKHRoaXMudGFiSWQsIGAke2NvbnN0YW50cy5QT1JUX1BPU1RNRVNTQUdFX30ke3RoaXMucG9ydElkfWAsIG1lc3NhZ2UpO1xuICB9XG5cbiAgX29uRGlzY29ubmVjdCgpIHtcbiAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgaXBjUmVuZGVyZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGAke2NvbnN0YW50cy5QT1JUX1BPU1RNRVNTQUdFX30ke3RoaXMucG9ydElkfWApO1xuICAgIHRoaXMub25EaXNjb25uZWN0LmVtaXQoKTtcbiAgfVxufVxuXG5cbmNvbnN0IGdldFBvcnQgPSAoY29udGV4dCwgdGFiSWQsIHBvcnRJZCwgZXh0ZW5zaW9uSWQsIG5hbWUsIHVybCkgPT4ge1xuICBjb25zdCBrZXkgPSBgJHt0YWJJZH0tJHtwb3J0SWR9LSR7ZXh0ZW5zaW9uSWR9LSR7bmFtZX1gO1xuXG4gIGlmIChjb250ZXh0Ll9fcG9ydHMuaGFzKGtleSkpIHtcbiAgICByZXR1cm4gY29udGV4dC5fX3BvcnRzLmdldChrZXkpXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbmV3UG9ydCA9IG5ldyBQb3J0KHRhYklkLCBwb3J0SWQsIGV4dGVuc2lvbklkLCBuYW1lLCB1cmwpXG4gICAgY29udGV4dC5fX3BvcnRzLnNldChrZXksIG5ld1BvcnQpXG4gICAgcmV0dXJuIG5ld1BvcnRcbiAgfVxufVxuXG5leHBvcnRzLmdldCA9IChjb250ZXh0LCB0YWJJZCwgcG9ydElkLCBleHRlbnNpb25JZCwgbmFtZSwgdXJsKSA9PiBnZXRQb3J0KGNvbnRleHQsIHRhYklkLCBwb3J0SWQsIGV4dGVuc2lvbklkLCBuYW1lLCB1cmwpXG4iXX0=