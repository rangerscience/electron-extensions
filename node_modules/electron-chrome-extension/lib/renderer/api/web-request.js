const { webContents, webFrame } = require('electron');
const { ipcRenderer } = require('electron');
const RCEvent = require('./rc-event');
const constants = require('../../common/constants');
const WEBREQUEST_EVENTS = ['onBeforeRequest', 'onBeforeSendHeaders', 'onSendHeaders',
    'onHeadersReceived', 'onAuthRequired', 'onResponseStarted', 'onBeforeRedirect', 'onCompleted',
    'onErrorOccurred'];
class ChromeWebRequestAPIClient {
    constructor(extensionId) {
        this.MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES = 10;
        WEBREQUEST_EVENTS.forEach(event => this[event] = new RCEvent(`${extensionId}-webRequest-${event}`));
        ipcRenderer.on(`${constants.WEBREQUEST_CLEAR_CACHE}`, (event, onNavigation) => {
            // todo: handle the `onNavigation` argument
            // now we simply clear cache
            webFrame.clearCache();
        });
    }
    handlerBehaviorChanged() {
        ipcRenderer.send(`${constants.WEBREQUEST_ASK_CLEAR_CACHE}`);
        return Promise.resolve();
    }
}
exports.setup = extensionId => new ChromeWebRequestAPIClient(extensionId);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViLXJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVuZGVyZXIvYXBpL3dlYi1yZXF1ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RELE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDNUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3RDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXBELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxxQkFBcUIsRUFBRSxlQUFlO0lBQ2xGLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLGtCQUFrQixFQUFFLGFBQWE7SUFDN0YsaUJBQWlCLENBQUMsQ0FBQztBQUVyQixNQUFNLHlCQUF5QjtJQUM3QixZQUFZLFdBQVc7UUFDckIsSUFBSSxDQUFDLGlEQUFpRCxHQUFHLEVBQUUsQ0FBQztRQUM1RCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxXQUFXLGVBQWUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBR3BHLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRTtZQUM1RSwyQ0FBMkM7WUFDM0MsNEJBQTRCO1lBQzVCLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUN2QixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxzQkFBc0I7UUFDcEIsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQywwQkFBMEIsRUFBRSxDQUFDLENBQUE7UUFDM0QsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDMUIsQ0FBQztDQUNGO0FBRUQsT0FBTyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUkseUJBQXlCLENBQUMsV0FBVyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHdlYkNvbnRlbnRzLCB3ZWJGcmFtZSB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcbmNvbnN0IHsgaXBjUmVuZGVyZXIgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5jb25zdCBSQ0V2ZW50ID0gcmVxdWlyZSgnLi9yYy1ldmVudCcpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29tbW9uL2NvbnN0YW50cycpO1xuXG5jb25zdCBXRUJSRVFVRVNUX0VWRU5UUyA9IFsnb25CZWZvcmVSZXF1ZXN0JywgJ29uQmVmb3JlU2VuZEhlYWRlcnMnLCAnb25TZW5kSGVhZGVycycsXG4gICdvbkhlYWRlcnNSZWNlaXZlZCcsICdvbkF1dGhSZXF1aXJlZCcsICdvblJlc3BvbnNlU3RhcnRlZCcsICdvbkJlZm9yZVJlZGlyZWN0JywgJ29uQ29tcGxldGVkJyxcbiAgJ29uRXJyb3JPY2N1cnJlZCddO1xuXG5jbGFzcyBDaHJvbWVXZWJSZXF1ZXN0QVBJQ2xpZW50IHtcbiAgY29uc3RydWN0b3IoZXh0ZW5zaW9uSWQpIHtcbiAgICB0aGlzLk1BWF9IQU5ETEVSX0JFSEFWSU9SX0NIQU5HRURfQ0FMTFNfUEVSXzEwX01JTlVURVMgPSAxMDtcbiAgICBXRUJSRVFVRVNUX0VWRU5UUy5mb3JFYWNoKGV2ZW50ID0+IHRoaXNbZXZlbnRdID0gbmV3IFJDRXZlbnQoYCR7ZXh0ZW5zaW9uSWR9LXdlYlJlcXVlc3QtJHtldmVudH1gKSk7XG5cblxuICAgIGlwY1JlbmRlcmVyLm9uKGAke2NvbnN0YW50cy5XRUJSRVFVRVNUX0NMRUFSX0NBQ0hFfWAsIChldmVudCwgb25OYXZpZ2F0aW9uKSA9PiB7XG4gICAgICAvLyB0b2RvOiBoYW5kbGUgdGhlIGBvbk5hdmlnYXRpb25gIGFyZ3VtZW50XG4gICAgICAvLyBub3cgd2Ugc2ltcGx5IGNsZWFyIGNhY2hlXG4gICAgICB3ZWJGcmFtZS5jbGVhckNhY2hlKClcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlckJlaGF2aW9yQ2hhbmdlZCAoKSB7XG4gICAgaXBjUmVuZGVyZXIuc2VuZChgJHtjb25zdGFudHMuV0VCUkVRVUVTVF9BU0tfQ0xFQVJfQ0FDSEV9YClcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgfVxufVxuXG5leHBvcnRzLnNldHVwID0gZXh0ZW5zaW9uSWQgPT4gbmV3IENocm9tZVdlYlJlcXVlc3RBUElDbGllbnQoZXh0ZW5zaW9uSWQpO1xuIl19