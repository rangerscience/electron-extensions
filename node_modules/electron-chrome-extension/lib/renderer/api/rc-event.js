const { rpc, RpcIpcManager } = require('electron-simple-rpc');
const { ipcRenderer } = require('electron');
const uuid = require('uuid/v1');
ipcRenderer.setMaxListeners(100);
class RCEvent {
    constructor(eventId) {
        this.listeners = new Map();
        this.controllerRPCScope = `${eventId}-controller`;
        this.eventRPCScope = `${eventId}-event`;
        this.rpcManager = new RpcIpcManager({
            triggerListener: this._triggerListener.bind(this)
        }, this.eventRPCScope);
    }
    addListener(callback, ...args) {
        const listenerId = uuid();
        this.listeners.set(listenerId, callback);
        rpc(this.controllerRPCScope, 'addListener')(listenerId, args);
    }
    hasListener(callback) {
        return !!this._listenerIdFromCallback(callback);
    }
    removeListener(callback) {
        const [listenerId, cb] = this._listenerIdFromCallback(callback);
        this.listeners.delete(listenerId);
    }
    _triggerListener(listenerId, args) {
        const listener = this.listeners.get(listenerId);
        if (!listener)
            return;
        try {
            return listener.call(this, args);
        }
        catch (e) {
            console.error(e);
        }
    }
    _listenerIdFromCallback(callback) {
        return Array.from(this.listeners.entries())
            .find(e => e[1] === callback);
    }
}
module.exports = RCEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmMtZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVuZGVyZXIvYXBpL3JjLWV2ZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDOUQsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM1QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFaEMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVqQyxNQUFNLE9BQU87SUFDWCxZQUFZLE9BQU87UUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRTNCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLE9BQU8sYUFBYSxDQUFDO1FBQ2xELElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxPQUFPLFFBQVEsQ0FBQztRQUV4QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDO1lBQ2xDLGVBQWUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNsRCxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUN4QixDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQVEsRUFBRSxHQUFHLElBQUk7UUFDM0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxXQUFXLENBQUMsUUFBUTtRQUNsQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDakQsQ0FBQztJQUVELGNBQWMsQ0FBQyxRQUFRO1FBQ3JCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSTtRQUMvQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFFdEIsSUFBSTtZQUNGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDbEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQsdUJBQXVCLENBQUMsUUFBUTtRQUM5QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUN4QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUE7SUFDakMsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHJwYywgUnBjSXBjTWFuYWdlciB9ID0gcmVxdWlyZSgnZWxlY3Ryb24tc2ltcGxlLXJwYycpO1xuY29uc3QgeyBpcGNSZW5kZXJlciB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcbmNvbnN0IHV1aWQgPSByZXF1aXJlKCd1dWlkL3YxJyk7XG5cbmlwY1JlbmRlcmVyLnNldE1heExpc3RlbmVycygxMDApO1xuXG5jbGFzcyBSQ0V2ZW50IHtcbiAgY29uc3RydWN0b3IoZXZlbnRJZCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuXG4gICAgdGhpcy5jb250cm9sbGVyUlBDU2NvcGUgPSBgJHtldmVudElkfS1jb250cm9sbGVyYDtcbiAgICB0aGlzLmV2ZW50UlBDU2NvcGUgPSBgJHtldmVudElkfS1ldmVudGA7XG5cbiAgICB0aGlzLnJwY01hbmFnZXIgPSBuZXcgUnBjSXBjTWFuYWdlcih7XG4gICAgICB0cmlnZ2VyTGlzdGVuZXI6IHRoaXMuX3RyaWdnZXJMaXN0ZW5lci5iaW5kKHRoaXMpXG4gICAgfSwgdGhpcy5ldmVudFJQQ1Njb3BlKVxuICB9XG5cbiAgYWRkTGlzdGVuZXIoY2FsbGJhY2ssIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBsaXN0ZW5lcklkID0gdXVpZCgpO1xuICAgIHRoaXMubGlzdGVuZXJzLnNldChsaXN0ZW5lcklkLCBjYWxsYmFjayk7XG4gICAgcnBjKHRoaXMuY29udHJvbGxlclJQQ1Njb3BlLCAnYWRkTGlzdGVuZXInKShsaXN0ZW5lcklkLCBhcmdzKTtcbiAgfVxuXG4gIGhhc0xpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fbGlzdGVuZXJJZEZyb21DYWxsYmFjayhjYWxsYmFjaylcbiAgfVxuXG4gIHJlbW92ZUxpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgW2xpc3RlbmVySWQsIGNiXSA9IHRoaXMuX2xpc3RlbmVySWRGcm9tQ2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMubGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcklkKVxuICB9XG5cbiAgX3RyaWdnZXJMaXN0ZW5lcihsaXN0ZW5lcklkLCBhcmdzKSB7XG4gICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVycy5nZXQobGlzdGVuZXJJZCk7XG4gICAgaWYgKCFsaXN0ZW5lcikgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5jYWxsKHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG5cbiAgX2xpc3RlbmVySWRGcm9tQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmxpc3RlbmVycy5lbnRyaWVzKCkpXG4gICAgICAuZmluZChlID0+IGVbMV0gPT09IGNhbGxiYWNrKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUkNFdmVudDtcbiJdfQ==