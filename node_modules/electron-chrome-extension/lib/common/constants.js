const constants = {};
// chrome.tabs
constants.TABS_ONCREATED = 'CHROME_TABS_ONCREATED';
constants.TABS_ONREMOVED = 'CHROME_TABS_ONREMOVED';
// chrome.webNavigation
constants.WEBNAVIGATION_ONBEFORENAVIGATE = 'CHROME_WEBNAVIGATION_ONBEFORENAVIGATE';
constants.WEBNAVIGATION_ONCOMPLETED = 'CHROME_WEBNAVIGATION_ONCOMPLETED';
// chrome.runtime.connect
constants.PORT_DISCONNECT_ = 'CHROME_PORT_DISCONNECT_';
constants.RUNTIME_ONCONNECT_ = 'CHROME_RUNTIME_ONCONNECT_';
constants.RUNTIME_CONNECT = 'CHROME_RUNTIME_CONNECT';
constants.PORT_POSTMESSAGE_ = 'CHROME_PORT_POSTMESSAGE_';
// chrome.i18n.getMessage
constants.I18N_MANIFEST = 'CHROME_I18N_MANIFEST';
// chrome.runtime.sendMessage
constants.RUNTIME_SENDMESSAGE = 'CHROME_RUNTIME_SENDMESSAGE';
constants.RUNTIME_ONMESSAGE_ = 'CHROME_RUNTIME_ONMESSAGE_';
// chrome.runtime.onMessage
constants.RUNTIME_ONMESSAGE_RESULT_ = 'CHROME_RUNTIME_ONMESSAGE_RESULT_';
constants.RUNTIME_SENDMESSAGE_RESULT_ = 'CHROME_RUNTIME_SENDMESSAGE_RESULT_';
// chrome.runtime.onMessage
constants.RUNTIME_GET_MANIFEST = 'RUNTIME_GET_MANIFEST';
// chrome.tabs.executeScript
constants.TABS_SEND_MESSAGE = 'CHROME_TABS_SEND_MESSAGE';
constants.TABS_SEND_MESSAGE_RESULT_ = 'CHROME_TABS_SEND_MESSAGE_RESULT_';
// chrome.tabs.executeScript
constants.TABS_EXECUTESCRIPT = 'CHROME_TABS_EXECUTESCRIPT';
constants.TABS_EXECUTESCRIPT_RESULT_ = 'CHROME_TABS_EXECUTESCRIPT_RESULT_';
// chrome.tabs.query
constants.TABS_QUERY = 'CHROME_TABS_QUERY';
constants.TABS_QUERY_RESULT_ = 'CHROME_TABS_QUERY_RESULT_';
constants.TABS_GET = 'CHROME_TABS_GET';
constants.TABS_GET_ = 'CHROME_TABS_GET_RESULT_';
// chrome.webRequest
constants.WEBREQUEST_ASK_CLEAR_CACHE = 'WEBREQUEST_ASK_CLEAR_CACHE';
constants.WEBREQUEST_CLEAR_CACHE = 'WEBREQUEST_CLEAR_CACHE';
constants.EXTENSION_PROTOCOL = 'chrome-extension';
// to differentiate from electron implementation of chrome extensions
// we change the name of ipc  channel used
const overriddenConstants = {};
const PREFIX = 'ELECTRON_CHROME_EXTENSION';
Object.keys(constants).forEach(constantKey => {
    overriddenConstants[constantKey] = `${PREFIX}_${constants[constantKey]}`;
});
// same. we change the extension protocol used
overriddenConstants.EXTENSION_PROTOCOL = 'chrome-extension';
overriddenConstants.DEFAULT_EXTENSION_PROTOCOL = 'chrome-extension';
// module.exports = constants;
module.exports = overriddenConstants;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9jb25zdGFudHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRXJCLGNBQWM7QUFDZCxTQUFTLENBQUMsY0FBYyxHQUFHLHVCQUF1QixDQUFDO0FBQ25ELFNBQVMsQ0FBQyxjQUFjLEdBQUcsdUJBQXVCLENBQUM7QUFFbkQsdUJBQXVCO0FBQ3ZCLFNBQVMsQ0FBQyw4QkFBOEIsR0FBRyx1Q0FBdUMsQ0FBQztBQUNuRixTQUFTLENBQUMseUJBQXlCLEdBQUcsa0NBQWtDLENBQUM7QUFFekUseUJBQXlCO0FBQ3pCLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQztBQUN2RCxTQUFTLENBQUMsa0JBQWtCLEdBQUcsMkJBQTJCLENBQUM7QUFDM0QsU0FBUyxDQUFDLGVBQWUsR0FBRyx3QkFBd0IsQ0FBQztBQUNyRCxTQUFTLENBQUMsaUJBQWlCLEdBQUcsMEJBQTBCLENBQUM7QUFFekQseUJBQXlCO0FBQ3pCLFNBQVMsQ0FBQyxhQUFhLEdBQUcsc0JBQXNCLENBQUM7QUFFakQsNkJBQTZCO0FBQzdCLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyw0QkFBNEIsQ0FBQztBQUM3RCxTQUFTLENBQUMsa0JBQWtCLEdBQUcsMkJBQTJCLENBQUM7QUFFM0QsMkJBQTJCO0FBQzNCLFNBQVMsQ0FBQyx5QkFBeUIsR0FBRyxrQ0FBa0MsQ0FBQztBQUN6RSxTQUFTLENBQUMsMkJBQTJCLEdBQUcsb0NBQW9DLENBQUM7QUFFN0UsMkJBQTJCO0FBQzNCLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxzQkFBc0IsQ0FBQztBQUV4RCw0QkFBNEI7QUFDNUIsU0FBUyxDQUFDLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDO0FBQ3pELFNBQVMsQ0FBQyx5QkFBeUIsR0FBRyxrQ0FBa0MsQ0FBQztBQUV6RSw0QkFBNEI7QUFDNUIsU0FBUyxDQUFDLGtCQUFrQixHQUFHLDJCQUEyQixDQUFDO0FBQzNELFNBQVMsQ0FBQywwQkFBMEIsR0FBRyxtQ0FBbUMsQ0FBQztBQUUzRSxvQkFBb0I7QUFDcEIsU0FBUyxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQztBQUMzQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsMkJBQTJCLENBQUM7QUFDM0QsU0FBUyxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQztBQUN2QyxTQUFTLENBQUMsU0FBUyxHQUFHLHlCQUF5QixDQUFDO0FBRWhELG9CQUFvQjtBQUNwQixTQUFTLENBQUMsMEJBQTBCLEdBQUcsNEJBQTRCLENBQUM7QUFDcEUsU0FBUyxDQUFDLHNCQUFzQixHQUFHLHdCQUF3QixDQUFDO0FBRTVELFNBQVMsQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztBQUVsRCxxRUFBcUU7QUFDckUsMENBQTBDO0FBQzFDLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0FBQy9CLE1BQU0sTUFBTSxHQUFHLDJCQUEyQixDQUFDO0FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFO0lBQzNDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxJQUFJLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO0FBQzNFLENBQUMsQ0FBQyxDQUFBO0FBRUYsOENBQThDO0FBQzlDLG1CQUFtQixDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0FBQzVELG1CQUFtQixDQUFDLDBCQUEwQixHQUFHLGtCQUFrQixDQUFDO0FBRXBFLDhCQUE4QjtBQUM5QixNQUFNLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29uc3RhbnRzID0ge307XG5cbi8vIGNocm9tZS50YWJzXG5jb25zdGFudHMuVEFCU19PTkNSRUFURUQgPSAnQ0hST01FX1RBQlNfT05DUkVBVEVEJztcbmNvbnN0YW50cy5UQUJTX09OUkVNT1ZFRCA9ICdDSFJPTUVfVEFCU19PTlJFTU9WRUQnO1xuXG4vLyBjaHJvbWUud2ViTmF2aWdhdGlvblxuY29uc3RhbnRzLldFQk5BVklHQVRJT05fT05CRUZPUkVOQVZJR0FURSA9ICdDSFJPTUVfV0VCTkFWSUdBVElPTl9PTkJFRk9SRU5BVklHQVRFJztcbmNvbnN0YW50cy5XRUJOQVZJR0FUSU9OX09OQ09NUExFVEVEID0gJ0NIUk9NRV9XRUJOQVZJR0FUSU9OX09OQ09NUExFVEVEJztcblxuLy8gY2hyb21lLnJ1bnRpbWUuY29ubmVjdFxuY29uc3RhbnRzLlBPUlRfRElTQ09OTkVDVF8gPSAnQ0hST01FX1BPUlRfRElTQ09OTkVDVF8nO1xuY29uc3RhbnRzLlJVTlRJTUVfT05DT05ORUNUXyA9ICdDSFJPTUVfUlVOVElNRV9PTkNPTk5FQ1RfJztcbmNvbnN0YW50cy5SVU5USU1FX0NPTk5FQ1QgPSAnQ0hST01FX1JVTlRJTUVfQ09OTkVDVCc7XG5jb25zdGFudHMuUE9SVF9QT1NUTUVTU0FHRV8gPSAnQ0hST01FX1BPUlRfUE9TVE1FU1NBR0VfJztcblxuLy8gY2hyb21lLmkxOG4uZ2V0TWVzc2FnZVxuY29uc3RhbnRzLkkxOE5fTUFOSUZFU1QgPSAnQ0hST01FX0kxOE5fTUFOSUZFU1QnO1xuXG4vLyBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZVxuY29uc3RhbnRzLlJVTlRJTUVfU0VORE1FU1NBR0UgPSAnQ0hST01FX1JVTlRJTUVfU0VORE1FU1NBR0UnO1xuY29uc3RhbnRzLlJVTlRJTUVfT05NRVNTQUdFXyA9ICdDSFJPTUVfUlVOVElNRV9PTk1FU1NBR0VfJztcblxuLy8gY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlXG5jb25zdGFudHMuUlVOVElNRV9PTk1FU1NBR0VfUkVTVUxUXyA9ICdDSFJPTUVfUlVOVElNRV9PTk1FU1NBR0VfUkVTVUxUXyc7XG5jb25zdGFudHMuUlVOVElNRV9TRU5ETUVTU0FHRV9SRVNVTFRfID0gJ0NIUk9NRV9SVU5USU1FX1NFTkRNRVNTQUdFX1JFU1VMVF8nO1xuXG4vLyBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2VcbmNvbnN0YW50cy5SVU5USU1FX0dFVF9NQU5JRkVTVCA9ICdSVU5USU1FX0dFVF9NQU5JRkVTVCc7XG5cbi8vIGNocm9tZS50YWJzLmV4ZWN1dGVTY3JpcHRcbmNvbnN0YW50cy5UQUJTX1NFTkRfTUVTU0FHRSA9ICdDSFJPTUVfVEFCU19TRU5EX01FU1NBR0UnO1xuY29uc3RhbnRzLlRBQlNfU0VORF9NRVNTQUdFX1JFU1VMVF8gPSAnQ0hST01FX1RBQlNfU0VORF9NRVNTQUdFX1JFU1VMVF8nO1xuXG4vLyBjaHJvbWUudGFicy5leGVjdXRlU2NyaXB0XG5jb25zdGFudHMuVEFCU19FWEVDVVRFU0NSSVBUID0gJ0NIUk9NRV9UQUJTX0VYRUNVVEVTQ1JJUFQnO1xuY29uc3RhbnRzLlRBQlNfRVhFQ1VURVNDUklQVF9SRVNVTFRfID0gJ0NIUk9NRV9UQUJTX0VYRUNVVEVTQ1JJUFRfUkVTVUxUXyc7XG5cbi8vIGNocm9tZS50YWJzLnF1ZXJ5XG5jb25zdGFudHMuVEFCU19RVUVSWSA9ICdDSFJPTUVfVEFCU19RVUVSWSc7XG5jb25zdGFudHMuVEFCU19RVUVSWV9SRVNVTFRfID0gJ0NIUk9NRV9UQUJTX1FVRVJZX1JFU1VMVF8nO1xuY29uc3RhbnRzLlRBQlNfR0VUID0gJ0NIUk9NRV9UQUJTX0dFVCc7XG5jb25zdGFudHMuVEFCU19HRVRfID0gJ0NIUk9NRV9UQUJTX0dFVF9SRVNVTFRfJztcblxuLy8gY2hyb21lLndlYlJlcXVlc3RcbmNvbnN0YW50cy5XRUJSRVFVRVNUX0FTS19DTEVBUl9DQUNIRSA9ICdXRUJSRVFVRVNUX0FTS19DTEVBUl9DQUNIRSc7XG5jb25zdGFudHMuV0VCUkVRVUVTVF9DTEVBUl9DQUNIRSA9ICdXRUJSRVFVRVNUX0NMRUFSX0NBQ0hFJztcblxuY29uc3RhbnRzLkVYVEVOU0lPTl9QUk9UT0NPTCA9ICdjaHJvbWUtZXh0ZW5zaW9uJztcblxuLy8gdG8gZGlmZmVyZW50aWF0ZSBmcm9tIGVsZWN0cm9uIGltcGxlbWVudGF0aW9uIG9mIGNocm9tZSBleHRlbnNpb25zXG4vLyB3ZSBjaGFuZ2UgdGhlIG5hbWUgb2YgaXBjICBjaGFubmVsIHVzZWRcbmNvbnN0IG92ZXJyaWRkZW5Db25zdGFudHMgPSB7fTtcbmNvbnN0IFBSRUZJWCA9ICdFTEVDVFJPTl9DSFJPTUVfRVhURU5TSU9OJztcbk9iamVjdC5rZXlzKGNvbnN0YW50cykuZm9yRWFjaChjb25zdGFudEtleSA9PiB7XG4gIG92ZXJyaWRkZW5Db25zdGFudHNbY29uc3RhbnRLZXldID0gYCR7UFJFRklYfV8ke2NvbnN0YW50c1tjb25zdGFudEtleV19YDtcbn0pXG5cbi8vIHNhbWUuIHdlIGNoYW5nZSB0aGUgZXh0ZW5zaW9uIHByb3RvY29sIHVzZWRcbm92ZXJyaWRkZW5Db25zdGFudHMuRVhURU5TSU9OX1BST1RPQ09MID0gJ2Nocm9tZS1leHRlbnNpb24nO1xub3ZlcnJpZGRlbkNvbnN0YW50cy5ERUZBVUxUX0VYVEVOU0lPTl9QUk9UT0NPTCA9ICdjaHJvbWUtZXh0ZW5zaW9uJztcblxuLy8gbW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudHM7XG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJyaWRkZW5Db25zdGFudHM7XG4iXX0=