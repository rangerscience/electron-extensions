const { session, ipcMain } = require('electron');
const enhanceWebRequest = require('electron-better-web-request').default;
const RCEventController = require('../rc-event-controller');
const helpers = require('../helpers');
const constants = require('../../common/constants');
const WEBREQUEST_EVENTS = ['onBeforeRequest', 'onBeforeSendHeaders', 'onSendHeaders',
    'onHeadersReceived', 'onAuthRequired', 'onResponseStarted', 'onBeforeRedirect', 'onCompleted',
    'onErrorOccurred'];
const fromElectronHeadersToChromeHeaders = (cbReturn) => {
    if (cbReturn && cbReturn.responseHeaders) {
        const responseHeaders = {};
        cbReturn.responseHeaders.forEach((header) => responseHeaders[header.name] = [header.value]);
        cbReturn.responseHeaders = responseHeaders;
    }
    return cbReturn;
};
const fromChromeHeadersToElectronHeaders = (details) => {
    if (details.responseHeaders)
        details.responseHeaders = Object.keys(details.responseHeaders).map((k) => ({ name: k, value: details.responseHeaders[k][0] }));
    return details;
};
class ChromeWebRequestAPIHandler {
    constructor(extensionId) {
        this.electronWebRequestApi = enhanceWebRequest(session.defaultSession).webRequest;
        this.rcEventControllers = [];
        WEBREQUEST_EVENTS.forEach(methodName => {
            const controller = new RCEventController(`${extensionId}-webRequest-${methodName}`);
            this.rcEventControllers.push(controller);
            controller.on('add-listener', (listenerArgs, remoteCallListener) => {
                const [filter, extraInfos] = listenerArgs;
                // https://cs.chromium.org/chromium/src/extensions/browser/api/web_request/web_request_api.cc?type=cs&l=2267
                helpers.clearCacheOnNavigation();
                this.electronWebRequestApi[methodName](filter, (details, callback) => {
                    if (callback)
                        remoteCallListener(fromChromeHeadersToElectronHeaders(details))
                            .then(returnedDetails => {
                            if (!returnedDetails)
                                return callback(details);
                            return callback(fromElectronHeadersToChromeHeaders(returnedDetails));
                        })
                            .catch(e => console.error(e));
                }, {
                    origin: 'ecx-api-handler',
                });
            });
        });
        this._handleAskToClearCache = this._handleAskToClearCache.bind(this);
        ipcMain.on(constants.WEBREQUEST_ASK_CLEAR_CACHE, this._handleAskToClearCache);
    }
    ;
    _handleAskToClearCache() {
        helpers.clearCacheOnNavigation();
    }
    release() {
        this.rcEventControllers.forEach(c => c.release());
        ipcMain.removeListener(constants.WEBREQUEST_ASK_CLEAR_CACHE, this._handleAskToClearCache);
    }
}
module.exports = ChromeWebRequestAPIHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViLXJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnJvd3Nlci9oYW5kbGVycy93ZWItcmVxdWVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqRCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUN6RSxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQzVELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN0QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUVwRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsaUJBQWlCLEVBQUUscUJBQXFCLEVBQUUsZUFBZTtJQUNsRixtQkFBbUIsRUFBRSxnQkFBZ0IsRUFBRSxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBRSxhQUFhO0lBQzdGLGlCQUFpQixDQUFDLENBQUM7QUFFckIsTUFBTSxrQ0FBa0MsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO0lBQ3RELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxlQUFlLEVBQUU7UUFDeEMsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzNCLFFBQVEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUYsUUFBUSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7S0FDNUM7SUFFRCxPQUFPLFFBQVEsQ0FBQTtBQUNqQixDQUFDLENBQUM7QUFFRixNQUFNLGtDQUFrQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDckQsSUFBSSxPQUFPLENBQUMsZUFBZTtRQUN6QixPQUFPLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ3ZFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLE1BQU0sMEJBQTBCO0lBQzlCLFlBQVksV0FBVztRQUNyQixJQUFJLENBQUMscUJBQXFCLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUNsRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO1FBRTdCLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFJLGlCQUFpQixDQUFDLEdBQUcsV0FBVyxlQUFlLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDcEYsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN6QyxVQUFVLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxFQUFFO2dCQUVqRSxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQztnQkFDMUMsNEdBQTRHO2dCQUM1RyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztnQkFFakMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUNwQyxNQUFNLEVBQ04sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUU7b0JBQ3BCLElBQUksUUFBUTt3QkFDVixrQkFBa0IsQ0FBQyxrQ0FBa0MsQ0FBQyxPQUFPLENBQUMsQ0FBQzs2QkFDNUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFOzRCQUN0QixJQUFJLENBQUMsZUFBZTtnQ0FBRSxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs0QkFDL0MsT0FBTyxRQUFRLENBQUMsa0NBQWtDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTt3QkFDdEUsQ0FBQyxDQUFDOzZCQUNELEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbkMsQ0FBQyxFQUNEO29CQUNFLE1BQU0sRUFBRSxpQkFBaUI7aUJBQzFCLENBQ0YsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRSxPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBQUEsQ0FBQztJQUVGLHNCQUFzQjtRQUNwQixPQUFPLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNqRCxPQUFPLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUM1RixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLDBCQUEwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBzZXNzaW9uLCBpcGNNYWluIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuY29uc3QgZW5oYW5jZVdlYlJlcXVlc3QgPSByZXF1aXJlKCdlbGVjdHJvbi1iZXR0ZXItd2ViLXJlcXVlc3QnKS5kZWZhdWx0O1xuY29uc3QgUkNFdmVudENvbnRyb2xsZXIgPSByZXF1aXJlKCcuLi9yYy1ldmVudC1jb250cm9sbGVyJyk7XG5jb25zdCBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycycpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29tbW9uL2NvbnN0YW50cycpO1xuXG5jb25zdCBXRUJSRVFVRVNUX0VWRU5UUyA9IFsnb25CZWZvcmVSZXF1ZXN0JywgJ29uQmVmb3JlU2VuZEhlYWRlcnMnLCAnb25TZW5kSGVhZGVycycsXG4gICdvbkhlYWRlcnNSZWNlaXZlZCcsICdvbkF1dGhSZXF1aXJlZCcsICdvblJlc3BvbnNlU3RhcnRlZCcsICdvbkJlZm9yZVJlZGlyZWN0JywgJ29uQ29tcGxldGVkJyxcbiAgJ29uRXJyb3JPY2N1cnJlZCddO1xuXG5jb25zdCBmcm9tRWxlY3Ryb25IZWFkZXJzVG9DaHJvbWVIZWFkZXJzID0gKGNiUmV0dXJuKSA9PiB7XG4gIGlmIChjYlJldHVybiAmJiBjYlJldHVybi5yZXNwb25zZUhlYWRlcnMpIHtcbiAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSB7fTtcbiAgICBjYlJldHVybi5yZXNwb25zZUhlYWRlcnMuZm9yRWFjaCgoaGVhZGVyKSA9PiByZXNwb25zZUhlYWRlcnNbaGVhZGVyLm5hbWVdID0gW2hlYWRlci52YWx1ZV0pO1xuICAgIGNiUmV0dXJuLnJlc3BvbnNlSGVhZGVycyA9IHJlc3BvbnNlSGVhZGVycztcbiAgfVxuXG4gIHJldHVybiBjYlJldHVyblxufTtcblxuY29uc3QgZnJvbUNocm9tZUhlYWRlcnNUb0VsZWN0cm9uSGVhZGVycyA9IChkZXRhaWxzKSA9PiB7XG4gIGlmIChkZXRhaWxzLnJlc3BvbnNlSGVhZGVycylcbiAgICBkZXRhaWxzLnJlc3BvbnNlSGVhZGVycyA9IE9iamVjdC5rZXlzKGRldGFpbHMucmVzcG9uc2VIZWFkZXJzKS5tYXAoKGspID0+XG4gICAgICAoeyBuYW1lOiBrLCB2YWx1ZTogZGV0YWlscy5yZXNwb25zZUhlYWRlcnNba11bMF0gfSkpO1xuXG4gIHJldHVybiBkZXRhaWxzO1xufTtcblxuY2xhc3MgQ2hyb21lV2ViUmVxdWVzdEFQSUhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihleHRlbnNpb25JZCkge1xuICAgIHRoaXMuZWxlY3Ryb25XZWJSZXF1ZXN0QXBpID0gZW5oYW5jZVdlYlJlcXVlc3Qoc2Vzc2lvbi5kZWZhdWx0U2Vzc2lvbikud2ViUmVxdWVzdDtcbiAgICB0aGlzLnJjRXZlbnRDb250cm9sbGVycyA9IFtdO1xuXG4gICAgV0VCUkVRVUVTVF9FVkVOVFMuZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgUkNFdmVudENvbnRyb2xsZXIoYCR7ZXh0ZW5zaW9uSWR9LXdlYlJlcXVlc3QtJHttZXRob2ROYW1lfWApO1xuICAgICAgdGhpcy5yY0V2ZW50Q29udHJvbGxlcnMucHVzaChjb250cm9sbGVyKTtcbiAgICAgIGNvbnRyb2xsZXIub24oJ2FkZC1saXN0ZW5lcicsIChsaXN0ZW5lckFyZ3MsIHJlbW90ZUNhbGxMaXN0ZW5lcikgPT4ge1xuXG4gICAgICAgIGNvbnN0IFtmaWx0ZXIsIGV4dHJhSW5mb3NdID0gbGlzdGVuZXJBcmdzO1xuICAgICAgICAvLyBodHRwczovL2NzLmNocm9taXVtLm9yZy9jaHJvbWl1bS9zcmMvZXh0ZW5zaW9ucy9icm93c2VyL2FwaS93ZWJfcmVxdWVzdC93ZWJfcmVxdWVzdF9hcGkuY2M/dHlwZT1jcyZsPTIyNjdcbiAgICAgICAgaGVscGVycy5jbGVhckNhY2hlT25OYXZpZ2F0aW9uKCk7XG5cbiAgICAgICAgdGhpcy5lbGVjdHJvbldlYlJlcXVlc3RBcGlbbWV0aG9kTmFtZV0oXG4gICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgIChkZXRhaWxzLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKVxuICAgICAgICAgICAgICByZW1vdGVDYWxsTGlzdGVuZXIoZnJvbUNocm9tZUhlYWRlcnNUb0VsZWN0cm9uSGVhZGVycyhkZXRhaWxzKSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXR1cm5lZERldGFpbHMgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKCFyZXR1cm5lZERldGFpbHMpIHJldHVybiBjYWxsYmFjayhkZXRhaWxzKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmcm9tRWxlY3Ryb25IZWFkZXJzVG9DaHJvbWVIZWFkZXJzKHJldHVybmVkRGV0YWlscykpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKGUpKVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgb3JpZ2luOiAnZWN4LWFwaS1oYW5kbGVyJyxcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgdGhpcy5faGFuZGxlQXNrVG9DbGVhckNhY2hlID0gdGhpcy5faGFuZGxlQXNrVG9DbGVhckNhY2hlLmJpbmQodGhpcyk7XG4gICAgaXBjTWFpbi5vbihjb25zdGFudHMuV0VCUkVRVUVTVF9BU0tfQ0xFQVJfQ0FDSEUsIHRoaXMuX2hhbmRsZUFza1RvQ2xlYXJDYWNoZSk7XG4gIH07XG5cbiAgX2hhbmRsZUFza1RvQ2xlYXJDYWNoZSgpIHtcbiAgICBoZWxwZXJzLmNsZWFyQ2FjaGVPbk5hdmlnYXRpb24oKTtcbiAgfVxuXG4gIHJlbGVhc2UoKSB7XG4gICAgdGhpcy5yY0V2ZW50Q29udHJvbGxlcnMuZm9yRWFjaChjID0+IGMucmVsZWFzZSgpKVxuICAgIGlwY01haW4ucmVtb3ZlTGlzdGVuZXIoY29uc3RhbnRzLldFQlJFUVVFU1RfQVNLX0NMRUFSX0NBQ0hFLCB0aGlzLl9oYW5kbGVBc2tUb0NsZWFyQ2FjaGUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hyb21lV2ViUmVxdWVzdEFQSUhhbmRsZXI7XG4iXX0=