"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const electron_1 = require("electron");
const cookies_1 = require("../../common/apis/cookies");
const handler_1 = tslib_1.__importDefault(require("../engine/handler"));
// todo(hugo) check permisions for URLs
const ELECTRON_TO_CRX_COOKIE_CHANGE_CAUSE = {
    explicit: 'explicit',
    overwrite: 'overwrite',
    expired: 'expired',
    evicted: 'evicted',
    'expired-overwrite': 'expired_overwrite',
};
class Cookies extends handler_1.default {
    constructor(extensionId, emitter) {
        super(extensionId, emitter);
        this.electronCookies = electron_1.session.defaultSession.cookies;
        this.electronCookies.addListener('changed', (_, cookie, cause, removed) => {
            const cxCookie = this.electronCookieToCxCookie(cookie);
            const cxCause = ELECTRON_TO_CRX_COOKIE_CHANGE_CAUSE[cause];
            const details = {
                cookie: cxCookie,
                cause: cxCause,
                removed,
            };
            this.emit(cookies_1.Events.OnChanged, details);
        });
    }
    handleGet(details) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { url, name } = details; // warning(hugo) ignore storeId
            return new Promise((resolve) => {
                this.electronCookies.get({ url, name }, (_error, cookies) => {
                    if (cookies && cookies[0]) {
                        const cookie = cookies[0];
                        resolve(this.electronCookieToCxCookie(cookie));
                    }
                    // "This parameter is null if no such cookie was found"
                    // https://developer.chrome.com/extensions/cookies#property-get-callback
                    resolve(null);
                });
            });
        });
    }
    handleGetAll(details) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { url, name, domain, path, secure, session } = details;
            // warning(hugo) ignore storeId
            return new Promise((resolve) => {
                this.electronCookies.get({ url, name, domain, path, secure, session }, (_error, cookies) => {
                    if (cookies) {
                        resolve(cookies.map(c => this.electronCookieToCxCookie(c)));
                    }
                    resolve([]);
                });
            });
        });
    }
    handleSet(details) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { url, name, value, domain, path, secure, httpOnly, expirationDate } = details; // warning(hugo) ignore sameSite & storeId
            return new Promise((resolve) => {
                this.electronCookies.set({ url, name, value, domain, path, secure, httpOnly, expirationDate }, (error) => {
                    if (error && error !== null) {
                        return resolve(undefined);
                    }
                    resolve({
                        name,
                        value,
                        domain,
                        path,
                        secure,
                        httpOnly,
                        expirationDate,
                        storeId: null,
                    });
                });
            });
        });
    }
    handleRemove(details) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { url, name } = details; // warning(hugo) ignore storeId
            return new Promise((resolve) => {
                this.electronCookies.remove(url, name, () => {
                    resolve({ url, name, storeId: null });
                });
            });
        });
    }
    handleGetAllCookieStores() { } // warning(hugo) ignore for now
    electronCookieToCxCookie(cookie) {
        const { name, value, domain, hostOnly, path, secure, httpOnly, session, expirationDate, } = cookie;
        return {
            name,
            value,
            domain: domain,
            hostOnly: hostOnly,
            path: path,
            secure: secure,
            httpOnly: httpOnly,
            sameSite: cookies_1.SameSiteStatus.NoRestriction,
            session: session,
            expirationDate,
            storeId: '0',
        };
    }
}
exports.default = Cookies;
//# sourceMappingURL=data:application/json;base64,