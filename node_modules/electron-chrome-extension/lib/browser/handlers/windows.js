"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const electron_1 = require("electron");
const windows_1 = require("../../common/apis/windows");
const handler_1 = tslib_1.__importDefault(require("../engine/handler"));
class Windows extends handler_1.default {
    constructor(extensionId, emitter) {
        super(extensionId, emitter);
        this.extensionWebContents = new Map();
    }
    handleGet(windowId, _getInfo) {
        const window = this.findBrowserWindow(windowId);
        if (window) {
            return {
                id: window.webContents.id,
                focused: window.isFocused(),
                incognito: false,
                alwaysOnTop: false,
            };
        }
        return {};
    }
    handleGetCurrent(_getInfo) {
        const window = electron_1.BrowserWindow.getFocusedWindow();
        if (window) {
            return {
                id: window.webContents.id,
                focused: window.isFocused(),
                incognito: false,
                alwaysOnTop: false,
            };
        }
        return {};
    }
    handleGetLastFocused(_getInfo) {
        const window = electron_1.BrowserWindow.getFocusedWindow();
        if (window) {
            return {
                id: window.webContents.id,
                focused: window.isFocused(),
                incognito: false,
                alwaysOnTop: false,
            };
        }
        return {};
    }
    handleGetAll(_getInfo) {
        const windows = electron_1.BrowserWindow.getAllWindows();
        const focusedWindow = electron_1.BrowserWindow.getFocusedWindow();
        const webContentsIds = focusedWindow ?
            new Set([...this.extensionWebContents.keys(), focusedWindow.webContents.id]) :
            new Set(this.extensionWebContents.keys());
        return windows
            .filter((window) => webContentsIds.has(window.webContents.id))
            .map((window) => ({
            id: window.webContents.id,
            focused: window.isFocused(),
            incognito: false,
            alwaysOnTop: false,
        }));
    }
    handleCreate(createData) {
        const { width, height, left, top, url } = createData;
        const window = new electron_1.BrowserWindow({
            width: width || 800,
            height: height || 600,
            x: left,
            y: top,
        });
        if (url)
            window.loadURL(url);
        this.extensionWebContents.set(window.webContents.id, window.webContents);
        const response = {
            id: window.webContents.id,
            focused: window.isFocused(),
            incognito: false,
            alwaysOnTop: false,
        };
        this.emit(windows_1.Events.OnCreated, response);
        return response;
    }
    handleUpdate(windowId, updateInfo) {
        const window = this.findBrowserWindow(windowId);
        if (window) {
            if (!this.extensionWebContents.has(window.webContents.id)) {
                return {};
            }
            if (updateInfo) {
                const { width, height, left, top } = updateInfo;
                if (updateInfo.width || updateInfo.height) {
                    const [windowWidth, windowHeight] = window.getSize();
                    window.setSize(width || windowWidth, height || windowHeight);
                }
                if (left || top) {
                    const [windowLeft, windowTop] = window.getPosition();
                    window.setPosition(left || windowLeft, top || windowTop);
                }
            }
            return {
                id: window.webContents.id,
                focused: window.isFocused(),
                incognito: false,
                alwaysOnTop: false,
            };
        }
        return {};
    }
    handleRemove(windowId) {
        const window = this.findBrowserWindow(windowId);
        if (window && this.extensionWebContents.has(window.webContents.id)) {
            window.close();
            this.extensionWebContents.delete(window.webContents.id);
            this.emit(windows_1.Events.OnRemoved, windowId);
        }
        return;
    }
    findBrowserWindow(windowId) {
        return electron_1.BrowserWindow
            .getAllWindows()
            .find((window) => window.webContents.id === windowId);
    }
}
exports.default = Windows;
//# sourceMappingURL=data:application/json;base64,