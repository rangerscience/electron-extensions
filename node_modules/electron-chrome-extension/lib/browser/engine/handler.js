"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const { RpcIpcManager } = require('electron-simple-rpc');
const common_1 = require("../../common");
/**
 * @name Handler
 * @abstract This abstract class provide the glue to be triggered
 * from the renderer via RPC and emit events. The handler prepare
 * a custom scope per extension id for the RPC Manager and
 * assign methods defined in the enum to the linked handler method.
 * @example see `src/browser/handlers/cookies.ts`
 * @param extensionId string
 * @param emitter Function - the event bus that will forward events to renderers
 */
class Handler {
    constructor(extensionId, emitter) {
        this.namespace = this.constructor.name;
        this.emitter = emitter;
        const definitions = path_1.join('..', '..', 'common', 'apis', this.namespace.toLowerCase());
        const { Methods } = require(definitions);
        const library = Object
            .keys(Methods)
            .reduce((handlers, method) => {
            const handler = this[`handle${method}`];
            handlers[Methods[method]] = (...args) => tslib_1.__awaiter(this, void 0, void 0, function* () { return yield handler.apply(this, args); });
            return handlers;
        }, {});
        const handlerScope = common_1.extensionScope(common_1.Channel.Handler, common_1.Api[this.namespace], extensionId);
        this.manager = new RpcIpcManager(library, handlerScope);
    }
    emit(eventName, payload) {
        const channel = common_1.eventScope(common_1.Api[this.namespace], eventName);
        this.emitter({ channel, payload });
    }
    release() {
        this.manager.release();
    }
}
exports.default = Handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9icm93c2VyL2VuZ2luZS9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtCQUE0QjtBQUU1QixNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFekQseUNBS3NCO0FBR3RCOzs7Ozs7Ozs7R0FTRztBQUVILE1BQThCLE9BQU87SUFRbkMsWUFBWSxXQUFtQixFQUFFLE9BQTREO1FBQzNGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFXLENBQUM7UUFDOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsTUFBTSxXQUFXLEdBQUcsV0FBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDckYsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV6QyxNQUFNLE9BQU8sR0FBRyxNQUFNO2FBQ25CLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDYixNQUFNLENBQ0wsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUV4QyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBTyxHQUFHLElBQVcsRUFBRSxFQUFFLHdEQUNuRCxPQUFBLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUEsR0FBQSxDQUFDO1lBRWxDLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsRUFDRCxFQUFFLENBQ0gsQ0FBQztRQUVKLE1BQU0sWUFBWSxHQUFHLHVCQUFjLENBQ2pDLGdCQUFPLENBQUMsT0FBTyxFQUFFLFlBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUNsRCxDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELElBQUksQ0FBQyxTQUFZLEVBQUUsT0FBeUM7UUFDMUQsTUFBTSxPQUFPLEdBQUcsbUJBQVUsQ0FBQyxZQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBM0NELDBCQTJDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcblxuY29uc3QgeyBScGNJcGNNYW5hZ2VyIH0gPSByZXF1aXJlKCdlbGVjdHJvbi1zaW1wbGUtcnBjJyk7XG5cbmltcG9ydCB7XG4gIEFwaSxcbiAgQ2hhbm5lbCxcbiAgZXh0ZW5zaW9uU2NvcGUsXG4gIGV2ZW50U2NvcGUsXG59IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBFeHRlbnNpb25FdmVudE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9jb21tb24vdHlwZXMnO1xuXG4vKipcbiAqIEBuYW1lIEhhbmRsZXJcbiAqIEBhYnN0cmFjdCBUaGlzIGFic3RyYWN0IGNsYXNzIHByb3ZpZGUgdGhlIGdsdWUgdG8gYmUgdHJpZ2dlcmVkXG4gKiBmcm9tIHRoZSByZW5kZXJlciB2aWEgUlBDIGFuZCBlbWl0IGV2ZW50cy4gVGhlIGhhbmRsZXIgcHJlcGFyZVxuICogYSBjdXN0b20gc2NvcGUgcGVyIGV4dGVuc2lvbiBpZCBmb3IgdGhlIFJQQyBNYW5hZ2VyIGFuZFxuICogYXNzaWduIG1ldGhvZHMgZGVmaW5lZCBpbiB0aGUgZW51bSB0byB0aGUgbGlua2VkIGhhbmRsZXIgbWV0aG9kLlxuICogQGV4YW1wbGUgc2VlIGBzcmMvYnJvd3Nlci9oYW5kbGVycy9jb29raWVzLnRzYFxuICogQHBhcmFtIGV4dGVuc2lvbklkIHN0cmluZ1xuICogQHBhcmFtIGVtaXR0ZXIgRnVuY3Rpb24gLSB0aGUgZXZlbnQgYnVzIHRoYXQgd2lsbCBmb3J3YXJkIGV2ZW50cyB0byByZW5kZXJlcnNcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBIYW5kbGVyPEU+IHtcblxuICBwcm90ZWN0ZWQgbmFtZXNwYWNlOiBBcGk7XG4gIHByb3RlY3RlZCBtYW5hZ2VyOiBhbnk7XG4gIHByb3RlY3RlZCBlbWl0dGVyOiAocGF5bG9hZDogRXh0ZW5zaW9uRXZlbnRNZXNzYWdlWydwYXlsb2FkJ10pID0+IHZvaWQ7XG4gIHByb3RlY3RlZCBoYW5kbGVyU2NvcGU6IHN0cmluZztcbiAgcHJvdGVjdGVkIGV2ZW50U2NvcGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihleHRlbnNpb25JZDogc3RyaW5nLCBlbWl0dGVyOiAocGF5bG9hZDogRXh0ZW5zaW9uRXZlbnRNZXNzYWdlWydwYXlsb2FkJ10pID0+IHZvaWQpIHtcbiAgICB0aGlzLm5hbWVzcGFjZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZSBhcyBBcGk7XG4gICAgdGhpcy5lbWl0dGVyID0gZW1pdHRlcjtcbiAgICBjb25zdCBkZWZpbml0aW9ucyA9IGpvaW4oJy4uJywgJy4uJywgJ2NvbW1vbicsICdhcGlzJywgdGhpcy5uYW1lc3BhY2UudG9Mb3dlckNhc2UoKSk7XG4gICAgY29uc3QgeyBNZXRob2RzIH0gPSByZXF1aXJlKGRlZmluaXRpb25zKTtcblxuICAgIGNvbnN0IGxpYnJhcnkgPSBPYmplY3RcbiAgICAgIC5rZXlzKE1ldGhvZHMpXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoaGFuZGxlcnMsIG1ldGhvZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzW2BoYW5kbGUke21ldGhvZH1gXTtcblxuICAgICAgICAgIGhhbmRsZXJzW01ldGhvZHNbbWV0aG9kXV0gPSBhc3luYyAoLi4uYXJnczogYW55W10pID0+XG4gICAgICAgICAgICBhd2FpdCBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZXJzO1xuICAgICAgICB9LFxuICAgICAgICB7fVxuICAgICAgKTtcblxuICAgIGNvbnN0IGhhbmRsZXJTY29wZSA9IGV4dGVuc2lvblNjb3BlKFxuICAgICAgQ2hhbm5lbC5IYW5kbGVyLCBBcGlbdGhpcy5uYW1lc3BhY2VdLCBleHRlbnNpb25JZFxuICAgICk7XG5cbiAgICB0aGlzLm1hbmFnZXIgPSBuZXcgUnBjSXBjTWFuYWdlcihsaWJyYXJ5LCBoYW5kbGVyU2NvcGUpO1xuICB9XG5cbiAgZW1pdChldmVudE5hbWU6IEUsIHBheWxvYWQ6IEV4dGVuc2lvbkV2ZW50TWVzc2FnZVsncGF5bG9hZCddKSB7XG4gICAgY29uc3QgY2hhbm5lbCA9IGV2ZW50U2NvcGUoQXBpW3RoaXMubmFtZXNwYWNlXSBhcyBBcGksIGV2ZW50TmFtZSk7XG4gICAgdGhpcy5lbWl0dGVyKHsgY2hhbm5lbCwgcGF5bG9hZCB9KTtcbiAgfVxuXG4gIHJlbGVhc2UoKSB7XG4gICAgdGhpcy5tYW5hZ2VyLnJlbGVhc2UoKTtcbiAgfVxufVxuIl19