"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const electron_1 = require("electron");
const fs_1 = require("fs");
const stream_1 = require("stream");
const mime_types_1 = require("mime-types");
const path_1 = require("path");
const url_1 = require("url");
const util_1 = require("util");
const common_1 = require("../../common");
const chrome_extension_1 = require("../chrome-extension");
const utils_1 = require("../../common/utils");
const asyncReadFile = util_1.promisify(fs_1.readFile);
/**
 * Protocol.ts
 *
 * Everything related to `chrome-extension://` protocol goes here
 *
 * - Register protocol
 * - Handle and serve extension web resources and background page
 *
**/
// defaultContentSecurityPolicy match Chromium kDefaultContentSecurityPolicy
// https://cs.chromium.org/chromium/src/extensions/common/manifest_handlers/csp_info.cc?l=31
// tslint:disable-next-line: max-line-length
const defaultContentSecurityPolicy = 'script-src \'self\' blob: filesystem: chrome-extension-resource:; object-src \'self\' blob: filesystem:;';
electron_1.protocol.registerSchemesAsPrivileged([
    { scheme: utils_1.protocolAsScheme(common_1.Protocol.Extension),
        privileges: { standard: true, secure: true, bypassCSP: true } },
]);
// The protocol handler load file into Buffers
// before transform them into a Stream (expected in callback).
// Stream callback allow custom headers.
const protocolHandler = ({ url }, callback) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const { hostname, pathname } = url_1.parse(url);
    if (!hostname || !pathname)
        return callback();
    const extension = chrome_extension_1.getExtensionById(hostname);
    if (!extension)
        return callback();
    const { src, backgroundPage: { name, html } } = extension;
    const manifestPath = path_1.join(src, 'manifest.json');
    const manifestFile = yield asyncReadFile(manifestPath, 'utf-8');
    const manifest = JSON.parse(manifestFile);
    const headers = new Map();
    // Always send CORS
    // refs:
    // https://cs.chromium.org/chromium/src/extensions/browser/extension_protocols.cc?l=524
    // https://cs.chromium.org/chromium/src/extensions/browser/extension_protocols.cc?l=330
    // https://cs.chromium.org/chromium/src/extensions/browser/extension_protocols.cc?l=1017
    headers.set('access-control-allow-origin', '*');
    // Set Content Security Policy for Chrome Extensions
    //
    // refs:
    // GetSecurityPolicyForURL - https://cs.chromium.org/chromium/src/extensions/browser/extension_protocols.cc?l=498
    // CSPInfo::GetExtensionPagesCSP - https://cs.chromium.org/chromium/src/extensions/common/manifest_handlers/csp_info.cc?l=110
    // CSPHandler::ParseExtensionPagesCSP - https://cs.chromium.org/chromium/src/extensions/common/manifest_handlers/csp_info.cc?l=216
    // CSPHandler::SetDefaultExtensionPagesCSP - https://cs.chromium.org/chromium/src/extensions/common/manifest_handlers/csp_info.cc?rcl=4292bebbd8388070fc8718bb54d793b6f36fe4a6&l=311
    const manifestContentSecurityPolicy = manifest.content_security_policy;
    const contentSecurityPolicy = manifestContentSecurityPolicy ?
        manifestContentSecurityPolicy : defaultContentSecurityPolicy;
    headers.set('content-security-policy', contentSecurityPolicy);
    // Check if we serve the background page (html)
    if (`/${name}` === pathname) {
        headers.set('content-type', 'text/html');
        const backgroundPageData = (new stream_1.PassThrough())
            .end(html);
        return callback({
            statusCode: 200,
            headers: utils_1.fromEntries(headers),
            data: backgroundPageData,
        });
    }
    const uri = path_1.join(src, pathname);
    const data = fs_1.createReadStream(uri);
    const mimeType = mime_types_1.lookup(pathname);
    if (mimeType)
        headers.set('content-type', mimeType);
    return callback({
        statusCode: 200,
        headers: utils_1.fromEntries(headers),
        data,
    });
});
electron_1.app.on('session-created', (session) => {
    if (common_1.Protocol.Extension === common_1.Protocol.ExtensionDefault) {
        session.protocol.unregisterProtocol(utils_1.protocolAsScheme(common_1.Protocol.ExtensionDefault));
    }
    session.protocol.registerStreamProtocol(utils_1.protocolAsScheme(common_1.Protocol.Extension), protocolHandler, (error) => {
        if (error) {
            console.error(`Unable to register ${common_1.Protocol.Extension} protocol: ${error}`);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnJvd3Nlci9lbmdpbmUvcHJvdG9jb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQXlDO0FBQ3pDLDJCQUFnRDtBQUNoRCxtQ0FBcUM7QUFDckMsMkNBQW9DO0FBQ3BDLCtCQUE0QjtBQUM1Qiw2QkFBNEI7QUFDNUIsK0JBQWlDO0FBSWpDLHlDQUF3QztBQUN4QywwREFBdUQ7QUFDdkQsOENBQW1FO0FBRW5FLE1BQU0sYUFBYSxHQUFHLGdCQUFTLENBQUMsYUFBUSxDQUFDLENBQUM7QUFFMUM7Ozs7Ozs7O0dBUUc7QUFFSCw0RUFBNEU7QUFDNUUsNEZBQTRGO0FBQzVGLDRDQUE0QztBQUM1QyxNQUFNLDRCQUE0QixHQUFHLDBHQUEwRyxDQUFDO0FBRS9JLG1CQUFnQixDQUFDLDJCQUEyQixDQUFDO0lBQzVDLEVBQUUsTUFBTSxFQUFFLHdCQUFnQixDQUFDLGlCQUFRLENBQUMsU0FBUyxDQUFDO1FBQzVDLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUU7Q0FDbEUsQ0FBQyxDQUFDO0FBRUgsOENBQThDO0FBQzlDLDhEQUE4RDtBQUM5RCx3Q0FBd0M7QUFFeEMsTUFBTSxlQUFlLEdBQUcsQ0FDdEIsRUFBRSxHQUFHLEVBQTBDLEVBQy9DLFFBQWtCLEVBQ2xCLEVBQUU7SUFDRixNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLFdBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUTtRQUFFLE9BQU8sUUFBUSxFQUFFLENBQUM7SUFFOUMsTUFBTSxTQUFTLEdBQUcsbUNBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsSUFBSSxDQUFDLFNBQVM7UUFBRSxPQUFPLFFBQVEsRUFB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IHsgYXBwLCBwcm90b2NvbCB9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7IGNyZWF0ZVJlYWRTdHJlYW0sIHJlYWRGaWxlIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgUGFzc1Rocm91Z2ggfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgbG9va3VwIH0gZnJvbSAnbWltZS10eXBlcyc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ3VybCc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbi8vIEB0cy1pZ25vcmUgbm8gdHlwZXNcbmltcG9ydCBtYXRjaEFsbCBmcm9tICdzdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsJztcblxuaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgZ2V0RXh0ZW5zaW9uQnlJZCB9IGZyb20gJy4uL2Nocm9tZS1leHRlbnNpb24nO1xuaW1wb3J0IHsgcHJvdG9jb2xBc1NjaGVtZSwgZnJvbUVudHJpZXMgfSBmcm9tICcuLi8uLi9jb21tb24vdXRpbHMnO1xuXG5jb25zdCBhc3luY1JlYWRGaWxlID0gcHJvbWlzaWZ5KHJlYWRGaWxlKTtcblxuLyoqXG4gKiBQcm90b2NvbC50c1xuICpcbiAqIEV2ZXJ5dGhpbmcgcmVsYXRlZCB0byBgY2hyb21lLWV4dGVuc2lvbjovL2AgcHJvdG9jb2wgZ29lcyBoZXJlXG4gKlxuICogLSBSZWdpc3RlciBwcm90b2NvbFxuICogLSBIYW5kbGUgYW5kIHNlcnZlIGV4dGVuc2lvbiB3ZWIgcmVzb3VyY2VzIGFuZCBiYWNrZ3JvdW5kIHBhZ2VcbiAqXG4qKi9cblxuLy8gZGVmYXVsdENvbnRlbnRTZWN1cml0eVBvbGljeSBtYXRjaCBDaHJvbWl1bSBrRGVmYXVsdENvbnRlbnRTZWN1cml0eVBvbGljeVxuLy8gaHR0cHM6Ly9jcy5jaHJvbWl1bS5vcmcvY2hyb21pdW0vc3JjL2V4dGVuc2lvbnMvY29tbW9uL21hbmlmZXN0X2hhbmRsZXJzL2NzcF9pbmZvLmNjP2w9MzFcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXG5jb25zdCBkZWZhdWx0Q29udGVudFNlY3VyaXR5UG9saWN5ID0gJ3NjcmlwdC1zcmMgXFwnc2VsZlxcJyBibG9iOiBmaWxlc3lzdGVtOiBjaHJvbWUtZXh0ZW5zaW9uLXJlc291cmNlOjsgb2JqZWN0LXNyYyBcXCdzZWxmXFwnIGJsb2I6IGZpbGVzeXN0ZW06Oyc7XG5cbihwcm90b2NvbCBhcyBhbnkpLnJlZ2lzdGVyU2NoZW1lc0FzUHJpdmlsZWdlZChbXG4gIHsgc2NoZW1lOiBwcm90b2NvbEFzU2NoZW1lKFByb3RvY29sLkV4dGVuc2lvbiksXG4gICAgcHJpdmlsZWdlczogeyBzdGFuZGFyZDogdHJ1ZSwgc2VjdXJlOiB0cnVlLCBieXBhc3NDU1A6IHRydWUgfSB9LFxuXSk7XG5cbi8vIFRoZSBwcm90b2NvbCBoYW5kbGVyIGxvYWQgZmlsZSBpbnRvIEJ1ZmZlcnNcbi8vIGJlZm9yZSB0cmFuc2Zvcm0gdGhlbSBpbnRvIGEgU3RyZWFtIChleHBlY3RlZCBpbiBjYWxsYmFjaykuXG4vLyBTdHJlYW0gY2FsbGJhY2sgYWxsb3cgY3VzdG9tIGhlYWRlcnMuXG5cbmNvbnN0IHByb3RvY29sSGFuZGxlciA9IGFzeW5jIChcbiAgeyB1cmwgfTogRWxlY3Ryb24uUmVnaXN0ZXJCdWZmZXJQcm90b2NvbFJlcXVlc3QsXG4gIGNhbGxiYWNrOiBGdW5jdGlvblxuKSA9PiB7XG4gIGNvbnN0IHsgaG9zdG5hbWUsIHBhdGhuYW1lIH0gPSBwYXJzZSh1cmwpO1xuICBpZiAoIWhvc3RuYW1lIHx8ICFwYXRobmFtZSkgcmV0dXJuIGNhbGxiYWNrKCk7XG5cbiAgY29uc3QgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uQnlJZChob3N0bmFtZSk7XG4gIGlmICghZXh0ZW5zaW9uKSByZXR1cm4gY2FsbGJhY2soKTtcblxuICBjb25zdCB7IHNyYywgYmFja2dyb3VuZFBhZ2U6IHsgbmFtZSwgaHRtbCB9IH0gPSBleHRlbnNpb247XG5cbiAgY29uc3QgbWFuaWZlc3RQYXRoID0gam9pbihzcmMsICdtYW5pZmVzdC5qc29uJyk7XG4gIGNvbnN0IG1hbmlmZXN0RmlsZSA9IGF3YWl0IGFzeW5jUmVhZEZpbGUobWFuaWZlc3RQYXRoLCAndXRmLTgnKTtcbiAgY29uc3QgbWFuaWZlc3QgPSBKU09OLnBhcnNlKG1hbmlmZXN0RmlsZSk7XG5cbiAgY29uc3QgaGVhZGVycyA9IG5ldyBNYXAoKTtcblxuICAvLyBBbHdheXMgc2VuZCBDT1JTXG4gIC8vIHJlZnM6XG4gIC8vIGh0dHBzOi8vY3MuY2hyb21pdW0ub3JnL2Nocm9taXVtL3NyYy9leHRlbnNpb25zL2Jyb3dzZXIvZXh0ZW5zaW9uX3Byb3RvY29scy5jYz9sPTUyNFxuICAvLyBodHRwczovL2NzLmNocm9taXVtLm9yZy9jaHJvbWl1bS9zcmMvZXh0ZW5zaW9ucy9icm93c2VyL2V4dGVuc2lvbl9wcm90b2NvbHMuY2M/bD0zMzBcbiAgLy8gaHR0cHM6Ly9jcy5jaHJvbWl1bS5vcmcvY2hyb21pdW0vc3JjL2V4dGVuc2lvbnMvYnJvd3Nlci9leHRlbnNpb25fcHJvdG9jb2xzLmNjP2w9MTAxN1xuICBoZWFkZXJzLnNldCgnYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luJywgJyonKTtcblxuICAvLyBTZXQgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yIENocm9tZSBFeHRlbnNpb25zXG4gIC8vXG4gIC8vIHJlZnM6XG4gIC8vIEdldFNlY3VyaXR5UG9saWN5Rm9yVVJMIC0gaHR0cHM6Ly9jcy5jaHJvbWl1bS5vcmcvY2hyb21pdW0vc3JjL2V4dGVuc2lvbnMvYnJvd3Nlci9leHRlbnNpb25fcHJvdG9jb2xzLmNjP2w9NDk4XG4gIC8vIENTUEluZm86OkdldEV4dGVuc2lvblBhZ2VzQ1NQIC0gaHR0cHM6Ly9jcy5jaHJvbWl1bS5vcmcvY2hyb21pdW0vc3JjL2V4dGVuc2lvbnMvY29tbW9uL21hbmlmZXN0X2hhbmRsZXJzL2NzcF9pbmZvLmNjP2w9MTEwXG4gIC8vIENTUEhhbmRsZXI6OlBhcnNlRXh0ZW5zaW9uUGFnZXNDU1AgLSBodHRwczovL2NzLmNocm9taXVtLm9yZy9jaHJvbWl1bS9zcmMvZXh0ZW5zaW9ucy9jb21tb24vbWFuaWZlc3RfaGFuZGxlcnMvY3NwX2luZm8uY2M/bD0yMTZcbiAgLy8gQ1NQSGFuZGxlcjo6U2V0RGVmYXVsdEV4dGVuc2lvblBhZ2VzQ1NQIC0gaHR0cHM6Ly9jcy5jaHJvbWl1bS5vcmcvY2hyb21pdW0vc3JjL2V4dGVuc2lvbnMvY29tbW9uL21hbmlmZXN0X2hhbmRsZXJzL2NzcF9pbmZvLmNjP3JjbD00MjkyYmViYmQ4Mzg4MDcwZmM4NzE4YmI1NGQ3OTNiNmYzNmZlNGE2Jmw9MzExXG4gIGNvbnN0IG1hbmlmZXN0Q29udGVudFNlY3VyaXR5UG9saWN5ID0gbWFuaWZlc3QuY29udGVudF9zZWN1cml0eV9wb2xpY3k7XG4gIGNvbnN0IGNvbnRlbnRTZWN1cml0eVBvbGljeSA9IG1hbmlmZXN0Q29udGVudFNlY3VyaXR5UG9saWN5ID9cbiAgICBtYW5pZmVzdENvbnRlbnRTZWN1cml0eVBvbGljeSA6IGRlZmF1bHRDb250ZW50U2VjdXJpdHlQb2xpY3k7XG5cbiAgaGVhZGVycy5zZXQoJ2NvbnRlbnQtc2VjdXJpdHktcG9saWN5JywgY29udGVudFNlY3VyaXR5UG9saWN5KTtcblxuICAvLyBDaGVjayBpZiB3ZSBzZXJ2ZSB0aGUgYmFja2dyb3VuZCBwYWdlIChodG1sKVxuICBpZiAoYC8ke25hbWV9YCA9PT0gcGF0aG5hbWUpIHtcbiAgICBoZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvaHRtbCcpO1xuXG4gICAgY29uc3QgYmFja2dyb3VuZFBhZ2VEYXRhID0gKG5ldyBQYXNzVGhyb3VnaCgpKVxuICAgICAgLmVuZChodG1sKTtcblxuICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICBoZWFkZXJzOiBmcm9tRW50cmllcyhoZWFkZXJzKSxcbiAgICAgIGRhdGE6IGJhY2tncm91bmRQYWdlRGF0YSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHVyaSA9IGpvaW4oc3JjLCBwYXRobmFtZSk7XG4gIGNvbnN0IGRhdGEgPSBjcmVhdGVSZWFkU3RyZWFtKHVyaSk7XG5cbiAgY29uc3QgbWltZVR5cGUgPSBsb29rdXAocGF0aG5hbWUpO1xuICBpZiAobWltZVR5cGUpIGhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCBtaW1lVHlwZSk7XG5cbiAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgaGVhZGVyczogZnJvbUVudHJpZXMoaGVhZGVycyksXG4gICAgZGF0YSxcbiAgfSk7XG59O1xuXG5hcHAub24oJ3Nlc3Npb24tY3JlYXRlZCcsIChzZXNzaW9uKSA9PiB7XG4gIGlmIChQcm90b2NvbC5FeHRlbnNpb24gPT09IFByb3RvY29sLkV4dGVuc2lvbkRlZmF1bHQpIHtcbiAgICBzZXNzaW9uLnByb3RvY29sLnVucmVnaXN0ZXJQcm90b2NvbChcbiAgICAgIHByb3RvY29sQXNTY2hlbWUoUHJvdG9jb2wuRXh0ZW5zaW9uRGVmYXVsdClcbiAgICApO1xuICB9XG5cbiAgc2Vzc2lvbi5wcm90b2NvbC5yZWdpc3RlclN0cmVhbVByb3RvY29sKFxuICAgIHByb3RvY29sQXNTY2hlbWUoUHJvdG9jb2wuRXh0ZW5zaW9uKSxcbiAgICBwcm90b2NvbEhhbmRsZXIsXG4gICAgKGVycm9yOiBhbnkpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBVbmFibGUgdG8gcmVnaXN0ZXIgJHtQcm90b2NvbC5FeHRlbnNpb259IHByb3RvY29sOiAke2Vycm9yfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59KTtcbiJdfQ==