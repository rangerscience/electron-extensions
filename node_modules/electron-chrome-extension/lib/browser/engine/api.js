"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fetcher_1 = tslib_1.__importDefault(require("../fetcher"));
const chrome_extension_1 = require("../chrome-extension");
const types_1 = require("../../common/types");
class ECx {
    constructor() {
        this.loaded = new Map();
        this.needFirstScan = true;
    }
    stop() {
        fetcher_1.default.reset();
        this.unregisterExtensionUpdateListener();
    }
    setConfiguration(configuration = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { fetcher, onUpdate } = configuration;
            this.stop();
            this.fetcher = new fetcher_1.default(fetcher);
            if (onUpdate) {
                this.registerExtensionUpdateListener(onUpdate);
            }
            return this;
        });
    }
    load(extensionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.needFirstScan) {
                yield this.fetcher.scanInstalledExtensions();
                this.needFirstScan = false;
            }
            if (this.loaded.has(extensionId)) {
                return this.loaded.get(extensionId);
            }
            const extension = yield this.get(extensionId);
            const { location: { path } } = extension;
            chrome_extension_1.addExtension(extensionId, path);
            this.loaded.set(extensionId, extension);
            return extension;
        });
    }
    localLoad(name, version) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.loaded.has(name)) {
                return this.loaded.get(name);
            }
            const location = `./vendor/${name}/${version}`
            const extension = yield {
              id: name,
              location: location,
              version: version,
              updateUrl: ''
            }
            chrome_extension_1.addExtension(name, location);
            this.loaded.set(name, extension);
            console.log("extension", extension)
            return extension;
        });
    }
    unload(extensionId) {
        if (!this.loaded.has(extensionId)) {
            return;
        }
        chrome_extension_1.removeExtension(extensionId);
        this.loaded.delete(extensionId);
    }
    isLoaded(extensionId) {
        return this.loaded.has(extensionId);
    }
    isUpToDate(extensionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return !(yield this.fetcher.checkForUpdate(extensionId));
        });
    }
    get(extensionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const installedExtension = this.fetcher.get(extensionId);
            if (installedExtension) {
                const isUpToDate = yield this.isUpToDate(extensionId);
                if (isUpToDate) {
                    return installedExtension;
                }
                return yield this.fetcher.update(extensionId);
            }
            return yield this.fetcher.fetch(extensionId);
        });
    }
    sendEvent(event) {
        chrome_extension_1.sendEventToExtensions(event);
    }
    registerExtensionUpdateListener(callback) {
        this.unregisterExtensionUpdateListener();
        this.onExtensionUpdateListener = callback;
        this.fetcher.addListener(types_1.ExtensionStatus.Updated, this.onExtensionUpdateListener);
    }
    unregisterExtensionUpdateListener() {
        if (this.onExtensionUpdateListener) {
            this.fetcher.removeListener(types_1.ExtensionStatus.Updated, this.onExtensionUpdateListener);
        }
    }
}
exports.default = new ECx();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Jyb3dzZXIvZW5naW5lL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpRUFBaUM7QUFDakMsMERBSTZCO0FBQzdCLDhDQU80QjtBQUU1QixNQUFNLEdBQUc7SUFNUDtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSTtRQUNGLGlCQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVLLGdCQUFnQixDQUFDLGdCQUErQixFQUFFOztZQUN0RCxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLGFBQWEsQ0FBQztZQUU1QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFWixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVwQyxJQUFJLFFBQVEsRUFBRTtnQkFDWixJQUFJLENBQUMsK0JBQStCLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDaEQ7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7S0FBQTtJQUVLLElBQUksQ0FBQyxXQUE2Qjs7WUFDdEMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN0QixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztnQkFDN0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7YUFDNUI7WUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNoQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBRSxDQUFDO2FBQ3RDO1lBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQztZQUV6QywrQkFBYyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFeEMsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQztLQUFBO0lBRUQsTUFBTSxDQUFDLFdBQTZCO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUNqQyxPQUFPO1NBQ1I7UUFFRCxrQ0FBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTNCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxRQUFRLENBQUMsV0FBNkI7UUFDcEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUssVUFBVSxDQUFDLFdBQTZCOztZQUM1QyxPQUFPLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDM0QsQ0FBQztLQUFBO0lBRUssR0FBRyxDQUFDLFdBQTZCOztZQUNyQyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRXpELElBQUksa0JBQWtCLEVBQUU7Z0JBQ3RCLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFFdEQsSUFBSSxVQUFVLEVBQUU7b0JBQ2QsT0FBTyxrQkFBa0IsQ0FBQztpQkFDM0I7Z0JBRUQsT0FBTyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBZSxDQUFDO2FBQzdEO1lBRUQsT0FBTyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQy9DLENBQUM7S0FBQTtJQUVELFNBQVMsQ0FBQyxLQUE0QjtRQUNwQyx3Q0FBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU8sK0JBQStCLENBQ3JDLFFBQThCO1FBRTlCLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDO1FBRXpDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxRQUFRLENBQUM7UUFFMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQ3RCLHVCQUFlLENBQUMsT0FBTyxFQUN2QixJQUFJLENBQUMseUJBQXlCLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRU8saUNBQWlDO1FBQ3ZDLElBQUksSUFBSSxDQUFDLHlCQUF5QixFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUN6Qix1QkFBZSxDQUFDLE9BQU8sRUFDdkIsSUFBSSxDQUFDLHlCQUF5QixDQUMvQixDQUFDO1NBQ0g7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxJQUFJLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZldGNoZXIgZnJvbSAnLi4vZmV0Y2hlcic7XG5pbXBvcnQge1xuICBhZGRFeHRlbnNpb24gYXMgc3RhcnRFeHRlbnNpb24sXG4gIHJlbW92ZUV4dGVuc2lvbiBhcyBzdG9wRXh0ZW5zaW9uLFxuICBzZW5kRXZlbnRUb0V4dGVuc2lvbnMsXG59IGZyb20gJy4uL2Nocm9tZS1leHRlbnNpb24nO1xuaW1wb3J0IHtcbiAgSUV4dGVuc2lvbixcbiAgRXh0ZW5zaW9uTWFwLFxuICBFeHRlbnNpb25TdGF0dXMsXG4gIENhbGxiYWNrLFxuICBDb25maWd1cmF0aW9uLFxuICBFeHRlbnNpb25FdmVudE1lc3NhZ2UsXG59IGZyb20gJy4uLy4uL2NvbW1vbi90eXBlcyc7XG5cbmNsYXNzIEVDeCB7XG4gIHB1YmxpYyBsb2FkZWQ6IEV4dGVuc2lvbk1hcDtcbiAgcHJpdmF0ZSBuZWVkRmlyc3RTY2FuOiBib29sZWFuO1xuICBwcml2YXRlIGZldGNoZXI6IEZldGNoZXI7XG4gIHByaXZhdGUgb25FeHRlbnNpb25VcGRhdGVMaXN0ZW5lcjogQ2FsbGJhY2s8SUV4dGVuc2lvbj4gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5sb2FkZWQgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5uZWVkRmlyc3RTY2FuID0gdHJ1ZTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgRmV0Y2hlci5yZXNldCgpO1xuICAgIHRoaXMudW5yZWdpc3RlckV4dGVuc2lvblVwZGF0ZUxpc3RlbmVyKCk7XG4gIH1cblxuICBhc3luYyBzZXRDb25maWd1cmF0aW9uKGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb24gPSB7fSk6IFByb21pc2U8RUN4PiB7XG4gICAgY29uc3QgeyBmZXRjaGVyLCBvblVwZGF0ZSB9ID0gY29uZmlndXJhdGlvbjtcblxuICAgIHRoaXMuc3RvcCgpO1xuXG4gICAgdGhpcy5mZXRjaGVyID0gbmV3IEZldGNoZXIoZmV0Y2hlcik7XG5cbiAgICBpZiAob25VcGRhdGUpIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJFeHRlbnNpb25VcGRhdGVMaXN0ZW5lcihvblVwZGF0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhc3luYyBsb2FkKGV4dGVuc2lvbklkOiBJRXh0ZW5zaW9uWydpZCddKTogUHJvbWlzZTxJRXh0ZW5zaW9uPiB7XG4gICAgaWYgKHRoaXMubmVlZEZpcnN0U2Nhbikge1xuICAgICAgYXdhaXQgdGhpcy5mZXRjaGVyLnNjYW5JbnN0YWxsZWRFeHRlbnNpb25zKCk7XG4gICAgICB0aGlzLm5lZWRGaXJzdFNjYW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkZWQuaGFzKGV4dGVuc2lvbklkKSkge1xuICAgICAgcmV0dXJuIHRoaXMubG9hZGVkLmdldChleHRlbnNpb25JZCkhO1xuICAgIH1cblxuICAgIGNvbnN0IGV4dGVuc2lvbiA9IGF3YWl0IHRoaXMuZ2V0KGV4dGVuc2lvbklkKTtcbiAgICBjb25zdCB7IGxvY2F0aW9uOiB7IHBhdGggfSB9ID0gZXh0ZW5zaW9uO1xuXG4gICAgc3RhcnRFeHRlbnNpb24oZXh0ZW5zaW9uSWQsIHBhdGgpO1xuXG4gICAgdGhpcy5sb2FkZWQuc2V0KGV4dGVuc2lvbklkLCBleHRlbnNpb24pO1xuXG4gICAgcmV0dXJuIGV4dGVuc2lvbjtcbiAgfVxuXG4gIHVubG9hZChleHRlbnNpb25JZDogSUV4dGVuc2lvblsnaWQnXSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5sb2FkZWQuaGFzKGV4dGVuc2lvbklkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0b3BFeHRlbnNpb24oZXh0ZW5zaW9uSWQpO1xuXG4gICAgdGhpcy5sb2FkZWQuZGVsZXRlKGV4dGVuc2lvbklkKTtcbiAgfVxuXG4gIGlzTG9hZGVkKGV4dGVuc2lvbklkOiBJRXh0ZW5zaW9uWydpZCddKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVkLmhhcyhleHRlbnNpb25JZCk7XG4gIH1cblxuICBhc3luYyBpc1VwVG9EYXRlKGV4dGVuc2lvbklkOiBJRXh0ZW5zaW9uWydpZCddKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuICEoYXdhaXQgdGhpcy5mZXRjaGVyLmNoZWNrRm9yVXBkYXRlKGV4dGVuc2lvbklkKSk7XG4gIH1cblxuICBhc3luYyBnZXQoZXh0ZW5zaW9uSWQ6IElFeHRlbnNpb25bJ2lkJ10pOiBQcm9taXNlPElFeHRlbnNpb24+IHtcbiAgICBjb25zdCBpbnN0YWxsZWRFeHRlbnNpb24gPSB0aGlzLmZldGNoZXIuZ2V0KGV4dGVuc2lvbklkKTtcblxuICAgIGlmIChpbnN0YWxsZWRFeHRlbnNpb24pIHtcbiAgICAgIGNvbnN0IGlzVXBUb0RhdGUgPSBhd2FpdCB0aGlzLmlzVXBUb0RhdGUoZXh0ZW5zaW9uSWQpO1xuXG4gICAgICBpZiAoaXNVcFRvRGF0ZSkge1xuICAgICAgICByZXR1cm4gaW5zdGFsbGVkRXh0ZW5zaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5mZXRjaGVyLnVwZGF0ZShleHRlbnNpb25JZCkgYXMgSUV4dGVuc2lvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5mZXRjaGVyLmZldGNoKGV4dGVuc2lvbklkKTtcbiAgfVxuXG4gIHNlbmRFdmVudChldmVudDogRXh0ZW5zaW9uRXZlbnRNZXNzYWdlKTogdm9pZCB7XG4gICAgc2VuZEV2ZW50VG9FeHRlbnNpb25zKGV2ZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJFeHRlbnNpb25VcGRhdGVMaXN0ZW5lcihcbiAgICBjYWxsYmFjazogQ2FsbGJhY2s8SUV4dGVuc2lvbj5cbiAgKTogdm9pZCB7XG4gICAgdGhpcy51bnJlZ2lzdGVyRXh0ZW5zaW9uVXBkYXRlTGlzdGVuZXIoKTtcblxuICAgIHRoaXMub25FeHRlbnNpb25VcGRhdGVMaXN0ZW5lciA9IGNhbGxiYWNrO1xuXG4gICAgdGhpcy5mZXRjaGVyLmFkZExpc3RlbmVyKFxuICAgICAgRXh0ZW5zaW9uU3RhdHVzLlVwZGF0ZWQsXG4gICAgICB0aGlzLm9uRXh0ZW5zaW9uVXBkYXRlTGlzdGVuZXJcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB1bnJlZ2lzdGVyRXh0ZW5zaW9uVXBkYXRlTGlzdGVuZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMub25FeHRlbnNpb25VcGRhdGVMaXN0ZW5lcikge1xuICAgICAgdGhpcy5mZXRjaGVyLnJlbW92ZUxpc3RlbmVyKFxuICAgICAgICBFeHRlbnNpb25TdGF0dXMuVXBkYXRlZCxcbiAgICAgICAgdGhpcy5vbkV4dGVuc2lvblVwZGF0ZUxpc3RlbmVyXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgRUN4KCk7XG4iXX0=
