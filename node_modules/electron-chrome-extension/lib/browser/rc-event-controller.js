const { rpc, RpcIpcManager } = require('electron-simple-rpc');
const { ipcMain } = require('electron');
const EventEmitter = require('events');
ipcMain.setMaxListeners(100);
class RCEventController extends EventEmitter {
    constructor(eventId) {
        super();
        this.controlerRPCScope = `${eventId}-controller`;
        this.eventRPCScope = `${eventId}-event`;
        this.rpcManager = new RpcIpcManager({
            addListener: this._addListener.bind(this)
        }, this.controlerRPCScope);
    }
    _addListener(listenerId, listenerArgs) {
        const remoteCallListener = (args) => rpc(this.eventRPCScope, 'triggerListener')(listenerId, args).timeout(2500);
        this.emit('add-listener', listenerArgs, remoteCallListener);
    }
    release() {
        this.rpcManager.release();
    }
}
module.exports = RCEventController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmMtZXZlbnQtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icm93c2VyL3JjLWV2ZW50LWNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUM5RCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV2QyxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRTdCLE1BQU0saUJBQWtCLFNBQVEsWUFBWTtJQUMxQyxZQUFZLE9BQU87UUFDakIsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxPQUFPLGFBQWEsQ0FBQztRQUNqRCxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsT0FBTyxRQUFRLENBQUM7UUFFeEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGFBQWEsQ0FBQztZQUNsQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzFDLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFN0IsQ0FBQztJQUVELFlBQVksQ0FBQyxVQUFVLEVBQUUsWUFBWTtRQUNuQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDbEMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM1QixDQUFDO0NBQ0Q7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBycGMsIFJwY0lwY01hbmFnZXIgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uLXNpbXBsZS1ycGMnKTtcbmNvbnN0IHsgaXBjTWFpbiB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuXG5pcGNNYWluLnNldE1heExpc3RlbmVycygxMDApO1xuXG5jbGFzcyBSQ0V2ZW50Q29udHJvbGxlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGV2ZW50SWQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5jb250cm9sZXJSUENTY29wZSA9IGAke2V2ZW50SWR9LWNvbnRyb2xsZXJgO1xuICAgIHRoaXMuZXZlbnRSUENTY29wZSA9IGAke2V2ZW50SWR9LWV2ZW50YDtcblxuICAgIHRoaXMucnBjTWFuYWdlciA9IG5ldyBScGNJcGNNYW5hZ2VyKHtcbiAgICAgIGFkZExpc3RlbmVyOiB0aGlzLl9hZGRMaXN0ZW5lci5iaW5kKHRoaXMpXG4gICAgfSwgdGhpcy5jb250cm9sZXJSUENTY29wZSk7XG4gICAgXG4gIH1cblxuICBfYWRkTGlzdGVuZXIobGlzdGVuZXJJZCwgbGlzdGVuZXJBcmdzKSB7XG4gICAgY29uc3QgcmVtb3RlQ2FsbExpc3RlbmVyID0gKGFyZ3MpID0+XG4gICAgICBycGModGhpcy5ldmVudFJQQ1Njb3BlLCAndHJpZ2dlckxpc3RlbmVyJykobGlzdGVuZXJJZCwgYXJncykudGltZW91dCgyNTAwKTtcbiAgICB0aGlzLmVtaXQoJ2FkZC1saXN0ZW5lcicsIGxpc3RlbmVyQXJncywgcmVtb3RlQ2FsbExpc3RlbmVyKTtcbiAgfVxuXG4gIHJlbGVhc2UoKSB7XG4gICAgdGhpcy5ycGNNYW5hZ2VyLnJlbGVhc2UoKTtcbiAgfVxuIH1cblxubW9kdWxlLmV4cG9ydHMgPSBSQ0V2ZW50Q29udHJvbGxlcjtcbiJdfQ==