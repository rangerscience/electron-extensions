"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const electron_1 = require("electron");
const glob_1 = require("glob");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
// @ts-ignore
const unzip_crx_3_1 = tslib_1.__importDefault(require("unzip-crx-3"));
const location_1 = tslib_1.__importDefault(require("./location"));
const defaultConfiguration = process.env.NODE_ENV !== 'test'
    ? {
        extensionsFolder: new location_1.default(path_1.join(electron_1.app.getPath('userData'), 'ChromeExtensions')),
        cacheFolder: new location_1.default(path_1.join(electron_1.app.getPath('userData'), 'ChromeExtensions-cache')),
    }
    : {
        extensionsFolder: new location_1.default(''),
        cacheFolder: new location_1.default(''),
    };
class StorageProvider {
    constructor(customConfiguration = {}) {
        const { extensionsFolder, cacheFolder, } = Object.assign({}, defaultConfiguration, customConfiguration);
        this.extensionsFolder = extensionsFolder;
        this.cacheFolder = cacheFolder;
    }
    installExtension(crxDownload) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tempDestination = path_1.resolve(this.extensionsFolder.path, this.cacheFolder.path, crxDownload.id);
            yield fs_extra_1.ensureDir(tempDestination);
            yield this.unzipCrx(crxDownload.location, new location_1.default(tempDestination));
            const manifest = yield this.readManifest(new location_1.default(path_1.join(tempDestination, 'manifest.json')));
            const versionDestination = path_1.resolve(this.extensionsFolder.path, crxDownload.id, manifest.version);
            yield fs_extra_1.ensureDir(versionDestination);
            // todo: don't overwrite directly
            yield fs_extra_1.move(tempDestination, versionDestination, { overwrite: true });
            return {
                id: crxDownload.id,
                location: new location_1.default(versionDestination),
                manifest,
            };
        });
    }
    getInstalledExtension() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const extensionsInstallations = new Map();
            const folders = glob_1.sync(path_1.join(this.extensionsFolder.path, '**/manifest.json'));
            for (const manifestPath of folders) {
                const extensionTree = manifestPath.split('/');
                const version = extensionTree[extensionTree.length - 2];
                const extensionId = extensionTree[extensionTree.length - 3];
                if (!extensionsInstallations[extensionId]) {
                    extensionsInstallations.set(extensionId, new Map());
                }
                const manifest = yield this.readManifest(new location_1.default(manifestPath));
                extensionsInstallations
                    .get(extensionId)
                    .set(version, {
                    id: extensionId,
                    // todo: refacto the slice op
                    location: new location_1.default(manifestPath.slice(0, -14)),
                    manifest,
                });
            }
            return extensionsInstallations;
        });
    }
    readManifest(location) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return fs_extra_1.readJson(location.path);
        });
    }
    unzipCrx(crxPath, destination) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield unzip_crx_3_1.default(crxPath.path, destination.path);
                return true;
            }
            catch (err) {
                return false;
            }
        });
    }
}
exports.default = StorageProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9icm93c2VyL2ZldGNoZXIvc3RvcmFnZS1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBK0I7QUFDL0IsK0JBQTRCO0FBQzVCLCtCQUFxQztBQUNyQyx1Q0FBcUQ7QUFDckQsYUFBYTtBQUNiLHNFQUFnQztBQU1oQyxrRUFBa0M7QUFRbEMsTUFBTSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNO0lBQzFELENBQUMsQ0FBQztRQUNBLGdCQUFnQixFQUFFLElBQUksa0JBQVEsQ0FDNUIsV0FBSSxDQUFDLGNBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FDbEQ7UUFDRCxXQUFXLEVBQUUsSUFBSSxrQkFBUSxDQUN2QixXQUFJLENBQUMsY0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxDQUN4RDtLQUNGO0lBQ0QsQ0FBQyxDQUFDO1FBQ0EsZ0JBQWdCLEVBQUUsSUFBSSxrQkFBUSxDQUFDLEVBQUUsQ0FBQztRQUNsQyxXQUFXLEVBQUUsSUFBSSxrQkFBUSxDQUFDLEVBQUUsQ0FBQztLQUM5QixDQUFDO0FBRUosTUFBcUIsZUFBZTtJQUlsQyxZQUFZLHNCQUF1RCxFQUFFO1FBQ25FLE1BQU0sRUFDSixnQkFBZ0IsRUFDaEIsV0FBVyxHQUNaLHFCQUNJLG9CQUFvQixFQUNwQixtQkFBbUIsQ0FDdkIsQ0FBQztRQUVGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNqQyxDQUFDO0lBRUssZ0JBQWdCLENBQUMsV0FBc0I7O1lBQzNDLE1BQU0sZUFBZSxHQUFHLGNBQU8sQ0FDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUks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b250ZW50IjpbImltcG9ydCB7IGFwcCB9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7IHN5bmMgfSBmcm9tICdnbG9iJztcbmltcG9ydCB7IGpvaW4sIHJlc29sdmUgfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IG1vdmUsIHJlYWRKc29uLCBlbnN1cmVEaXIgfSBmcm9tICdmcy1leHRyYSc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdW56aXAgZnJvbSAndW56aXAtY3J4LTMnO1xuXG5pbXBvcnQge1xuICBJTG9jYXRpb24sXG59IGZyb20gJy4uLy4uL2NvbW1vbi90eXBlcyc7XG5cbmltcG9ydCBMb2NhdGlvbiBmcm9tICcuL2xvY2F0aW9uJztcbmltcG9ydCB7XG4gIElTdG9yYWdlUHJvdmlkZXIsXG4gIElNYW5pZmVzdCxcbiAgSURvd25sb2FkLFxuICBJU3RvcmFnZVByb3ZpZGVyQ29uZmlnLFxufSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZGVmYXVsdENvbmZpZ3VyYXRpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnXG4gID8ge1xuICAgIGV4dGVuc2lvbnNGb2xkZXI6IG5ldyBMb2NhdGlvbihcbiAgICAgIGpvaW4oYXBwLmdldFBhdGgoJ3VzZXJEYXRhJyksICdDaHJvbWVFeHRlbnNpb25zJylcbiAgICApLFxuICAgIGNhY2hlRm9sZGVyOiBuZXcgTG9jYXRpb24oXG4gICAgICBqb2luKGFwcC5nZXRQYXRoKCd1c2VyRGF0YScpLCAnQ2hyb21lRXh0ZW5zaW9ucy1jYWNoZScpXG4gICAgKSxcbiAgfVxuICA6IHtcbiAgICBleHRlbnNpb25zRm9sZGVyOiBuZXcgTG9jYXRpb24oJycpLFxuICAgIGNhY2hlRm9sZGVyOiBuZXcgTG9jYXRpb24oJycpLFxuICB9O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yYWdlUHJvdmlkZXIgaW1wbGVtZW50cyBJU3RvcmFnZVByb3ZpZGVyIHtcbiAgcHVibGljIGV4dGVuc2lvbnNGb2xkZXI6IElMb2NhdGlvbjtcbiAgcHVibGljIGNhY2hlRm9sZGVyOiBJTG9jYXRpb247XG5cbiAgY29uc3RydWN0b3IoY3VzdG9tQ29uZmlndXJhdGlvbjogUGFydGlhbDxJU3RvcmFnZVByb3ZpZGVyQ29uZmlnPiA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgZXh0ZW5zaW9uc0ZvbGRlcixcbiAgICAgIGNhY2hlRm9sZGVyLFxuICAgIH0gPSB7XG4gICAgICAuLi5kZWZhdWx0Q29uZmlndXJhdGlvbixcbiAgICAgIC4uLmN1c3RvbUNvbmZpZ3VyYXRpb24sXG4gICAgfTtcblxuICAgIHRoaXMuZXh0ZW5zaW9uc0ZvbGRlciA9IGV4dGVuc2lvbnNGb2xkZXI7XG4gICAgdGhpcy5jYWNoZUZvbGRlciA9IGNhY2hlRm9sZGVyO1xuICB9XG5cbiAgYXN5bmMgaW5zdGFsbEV4dGVuc2lvbihjcnhEb3dubG9hZDogSURvd25sb2FkKSB7XG4gICAgY29uc3QgdGVtcERlc3RpbmF0aW9uID0gcmVzb2x2ZShcbiAgICAgIHRoaXMuZXh0ZW5zaW9uc0ZvbGRlci5wYXRoLCB0aGlzLmNhY2hlRm9sZGVyLnBhdGgsIGNyeERvd25sb2FkLmlkXG4gICAgKTtcblxuICAgIGF3YWl0IGVuc3VyZURpcih0ZW1wRGVzdGluYXRpb24pO1xuXG4gICAgYXdhaXQgdGhpcy51bnppcENyeChjcnhEb3dubG9hZC5sb2NhdGlvbiwgbmV3IExvY2F0aW9uKHRlbXBEZXN0aW5hdGlvbikpO1xuXG4gICAgY29uc3QgbWFuaWZlc3QgPSBhd2FpdCB0aGlzLnJlYWRNYW5pZmVzdChcbiAgICAgIG5ldyBMb2NhdGlvbihqb2luKHRlbXBEZXN0aW5hdGlvbiwgJ21hbmlmZXN0Lmpzb24nKSlcbiAgICApO1xuXG4gICAgY29uc3QgdmVyc2lvbkRlc3RpbmF0aW9uID0gcmVzb2x2ZShcbiAgICAgIHRoaXMuZXh0ZW5zaW9uc0ZvbGRlci5wYXRoLCBjcnhEb3dubG9hZC5pZCwgbWFuaWZlc3QudmVyc2lvblxuICAgICk7XG5cbiAgICBhd2FpdCBlbnN1cmVEaXIodmVyc2lvbkRlc3RpbmF0aW9uKTtcblxuICAgIC8vIHRvZG86IGRvbid0IG92ZXJ3cml0ZSBkaXJlY3RseVxuICAgIGF3YWl0IG1vdmUodGVtcERlc3RpbmF0aW9uLCB2ZXJzaW9uRGVzdGluYXRpb24sIHsgb3ZlcndyaXRlOiB0cnVlIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBjcnhEb3dubG9hZC5pZCxcbiAgICAgIGxvY2F0aW9uOiBuZXcgTG9jYXRpb24odmVyc2lvbkRlc3RpbmF0aW9uKSxcbiAgICAgIG1hbmlmZXN0LFxuICAgIH07XG4gIH1cblxuICBhc3luYyBnZXRJbnN0YWxsZWRFeHRlbnNpb24oKSB7XG4gICAgY29uc3QgZXh0ZW5zaW9uc0luc3RhbGxhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZm9sZGVycyA9IHN5bmMoam9pbih0aGlzLmV4dGVuc2lvbnNGb2xkZXIucGF0aCwgJyoqL21hbmlmZXN0Lmpzb24nKSk7XG5cbiAgICBmb3IgKGNvbnN0IG1hbmlmZXN0UGF0aCBvZiBmb2xkZXJzKSB7XG4gICAgICBjb25zdCBleHRlbnNpb25UcmVlID0gbWFuaWZlc3RQYXRoLnNwbGl0KCcvJyk7XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZXh0ZW5zaW9uVHJlZVtleHRlbnNpb25UcmVlLmxlbmd0aCAtIDJdO1xuICAgICAgY29uc3QgZXh0ZW5zaW9uSWQgPSBleHRlbnNpb25UcmVlW2V4dGVuc2lvblRyZWUubGVuZ3RoIC0gM107XG5cbiAgICAgIGlmICghZXh0ZW5zaW9uc0luc3RhbGxhdGlvbnNbZXh0ZW5zaW9uSWRdKSB7XG4gICAgICAgIGV4dGVuc2lvbnNJbnN0YWxsYXRpb25zLnNldChleHRlbnNpb25JZCwgbmV3IE1hcCgpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWFuaWZlc3QgPSBhd2FpdCB0aGlzLnJlYWRNYW5pZmVzdChuZXcgTG9jYXRpb24obWFuaWZlc3RQYXRoKSk7XG5cbiAgICAgIGV4dGVuc2lvbnNJbnN0YWxsYXRpb25zXG4gICAgICAgIC5nZXQoZXh0ZW5zaW9uSWQpXG4gICAgICAgIC5zZXQodmVyc2lvbiwge1xuICAgICAgICAgIGlkOiBleHRlbnNpb25JZCxcbiAgICAgICAgICAvLyB0b2RvOiByZWZhY3RvIHRoZSBzbGljZSBvcFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXcgTG9jYXRpb24obWFuaWZlc3RQYXRoLnNsaWNlKDAsIC0xNCkpLFxuICAgICAgICAgIG1hbmlmZXN0LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXh0ZW5zaW9uc0luc3RhbGxhdGlvbnM7XG4gIH1cblxuICBhc3luYyByZWFkTWFuaWZlc3QobG9jYXRpb246IElMb2NhdGlvbik6IFByb21pc2U8SU1hbmlmZXN0PiB7XG4gICAgcmV0dXJuIHJlYWRKc29uKGxvY2F0aW9uLnBhdGgpO1xuICB9XG5cbiAgYXN5bmMgdW56aXBDcngoY3J4UGF0aDogSUxvY2F0aW9uLCBkZXN0aW5hdGlvbjogSUxvY2F0aW9uKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHVuemlwKGNyeFBhdGgucGF0aCwgZGVzdGluYXRpb24ucGF0aCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==