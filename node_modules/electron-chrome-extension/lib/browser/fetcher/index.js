"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const events_1 = require("events");
const types_1 = require("../../common/types");
const storage_provider_1 = tslib_1.__importDefault(require("./storage-provider"));
const download_provider_1 = tslib_1.__importDefault(require("./download-provider"));
const interpreter_provider_1 = tslib_1.__importDefault(require("./interpreter-provider"));
const types_2 = require("./types");
const defaultConfig = {
    downloader: new download_provider_1.default(),
    storager: new storage_provider_1.default(),
    interpreter: new interpreter_provider_1.default(),
    autoUpdateInterval: 300000,
    autoUpdate: false,
};
class Fetcher extends events_1.EventEmitter {
    constructor(customConfiguration = {}) {
        if (Fetcher.instance) {
            return Fetcher.instance;
        }
        super();
        const configuration = Object.assign({}, defaultConfig, customConfiguration);
        const { storager, downloader, interpreter, autoUpdateInterval, autoUpdate, } = configuration;
        this.storager = storager;
        this.downloader = downloader;
        this.interpreter = interpreter;
        this.autoUpdateInterval = autoUpdateInterval;
        this.available = new Map();
        this.mutex = new Map();
        if (autoUpdate) {
            this.autoUpdateLoop = setInterval(this.autoUpdate.bind(this), this.autoUpdateInterval);
        }
        Fetcher.instance = this;
    }
    static reset() {
        if (Fetcher.instance) {
            Fetcher.instance.stopAutoUpdate();
            delete Fetcher.instance;
        }
    }
    list() {
        return this.available;
    }
    save(extension) {
        this.available.set(extension.id, extension);
    }
    get(extensionId) {
        return this.available.get(extensionId);
    }
    hasMutex(extensionId) {
        return this.mutex.has(extensionId);
    }
    getMutex(extensionId) {
        return this.mutex.get(extensionId);
    }
    fetch(extensionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.mutex.has(extensionId)) {
                throw new Error(`Extension ${extensionId} is already being used`);
            }
            // todo: check if the extension already exists with this version ?
            // todo: react to errors
            this.mutex.set(extensionId, types_2.MutexStatus.Installing);
            const archiveCrx = yield this.downloader.downloadById(extensionId);
            const installed = yield this.storager.installExtension(archiveCrx);
            yield this.downloader.cleanupById(extensionId);
            const fetched = this.interpreter.interpret(installed);
            this.mutex.delete(extensionId);
            this.save(fetched);
            this.emit(types_1.ExtensionStatus.Installed, fetched);
            return fetched;
        });
    }
    update(extensionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const shouldUpdate = yield this.checkForUpdate(extensionId);
            if (shouldUpdate) {
                const updated = yield this.fetch(extensionId);
                this.emit(types_1.ExtensionStatus.Updated, updated);
                return updated;
            }
            return false;
        });
    }
    checkForUpdate(extensionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const cxInfos = this.available.get(extensionId);
            if (!cxInfos) {
                throw new Error('Unknown extension');
            }
            const updateInfos = yield this.downloader.getUpdateInfo(cxInfos);
            const shouldUpdate = this.interpreter.shouldUpdate(cxInfos, updateInfos);
            return shouldUpdate;
        });
    }
    // todo: pause or cancel if CX are being installed ?
    scanInstalledExtensions() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const installedInfos = yield this.storager.getInstalledExtension();
            for (const [key, value] of installedInfos) {
                const parsedVersions = Array.from(value.keys(), (version) => interpreter_provider_1.default.parseVersion(version));
                const latestVersion = this.interpreter.sortLastVersion(parsedVersions);
                const install = value.get(latestVersion.number);
                if (install) {
                    const cxInfo = this.interpreter.interpret(install);
                    this.available.set(key, cxInfo);
                    this.emit(types_1.ExtensionStatus.Discovered, cxInfo);
                }
            }
        });
    }
    autoUpdate() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const updates = [];
            for (const extensionId of this.available.keys()) {
                updates.push(this.update(extensionId));
            }
            const updatesResult = yield Promise.all(updates);
            return updatesResult.filter(Boolean);
        });
    }
    stopAutoUpdate() {
        clearInterval(this.autoUpdateLoop);
    }
}
exports.default = Fetcher;
//# sourceMappingURL=data:application/json;base64,