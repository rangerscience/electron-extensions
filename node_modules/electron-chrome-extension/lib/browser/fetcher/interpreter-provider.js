"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const xml_js_1 = require("xml-js");
class InterpreterProvider {
    static parseVersion(version) {
        const split = version.split('.');
        const parsed = split.map((elem) => parseInt(elem, 10));
        return {
            number: version,
            parsed,
        };
    }
    interpret(installed) {
        const { id, location, manifest: { update_url, version, }, } = installed;
        const parsedVersion = InterpreterProvider.parseVersion(version);
        return {
            id,
            location,
            version: parsedVersion,
            updateUrl: update_url,
        };
    }
    shouldUpdate(extension, updateInfos) {
        const parsedUpdates = this.readUpdateManifest(updateInfos.xml);
        const updateCheck = this.findUpdate(extension.id, parsedUpdates);
        if (!updateCheck) {
            return false;
        }
        const newVersion = this.getNewVersion(updateCheck);
        if (newVersion) {
            return this.greaterThan(newVersion, extension.version);
        }
        return false;
    }
    sortLastVersion(versions) {
        const noVersion = { number: '', parsed: [] };
        const highest = versions.reduce((previous, value) => {
            const greater = this.greaterThan(value, previous);
            return (greater) ? value : previous;
        }, noVersion);
        if (highest === noVersion) {
            throw new Error('No versions could be read and found');
        }
        return highest;
    }
    readUpdateManifest(xml) {
        return xml_js_1.xml2js(xml, { compact: false });
    }
    // todo: Improve the "any"
    findUpdate(extensionId, parsedUpdates) {
        const updates = this.getNested(parsedUpdates, ['elements', '0', 'elements']);
        if (!updates)
            return undefined;
        for (const update of updates) {
            if (extensionId === update.attributes.appid) {
                return update;
            }
        }
        return undefined;
    }
    getNewVersion(updateCheck) {
        const version = this.getNested(updateCheck, ['elements', '0', 'attributes', 'version']);
        if (!version) {
            return; // no update available
        }
        return InterpreterProvider.parseVersion(version);
    }
    greaterThan(a, b) {
        const x = a.parsed;
        const y = b.parsed;
        // Compare each digit of the version
        for (let i = 0; i < x.length; i = i + 1) {
            // The order of the rules is important
            if (isNaN(x[i]))
                return false; // If A[i] is not a number, then A cannot be higher or whatever
            if (y[i] === undefined)
                return true; // If B[i] has no value when A[i] has one, A is higher
            if (x[i] < y[i])
                return false; // If A[i] is lower than B[i], then A is not higher
            if (x[i] > y[i])
                return true; // If A[i] is higher than B[i], then A is higher
            // If none of the rules returned, then the numbers are equal, go to the next step
        }
        return false;
    }
    getNested(nestedObj, pathArr) {
        return pathArr.reduce((obj, key) => {
            return (obj && obj[key]) ? obj[key] : undefined;
        }, nestedObj);
    }
}
exports.default = InterpreterProvider;
//# sourceMappingURL=data:application/json;base64,