"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// @ts-ignore
const download_crx_1 = require("download-crx");
const tmp_promise_1 = require("tmp-promise");
const querystring_1 = require("querystring");
const location_1 = tslib_1.__importDefault(require("./location"));
let fetch;
// require electron main context
if (process.env.NODE_ENV !== 'test') {
    fetch = require('electron-fetch').default;
}
const chromeWebStoreVersion = process.versions.chrome.split('.').slice(0, 2).join('.');
class DownloadProvider {
    constructor() {
        this.downloads = new Map();
    }
    downloadById(extensionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tempDir = yield tmp_promise_1.dir({ prefix: 'ecx-', unsafeCleanup: true });
            this.downloads.set(extensionId, tempDir);
            const path = yield download_crx_1.downloadById(extensionId, tempDir.path, extensionId);
            return {
                id: extensionId,
                location: new location_1.default(path),
            };
        });
    }
    cleanupById(extensionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tmpDir = this.downloads.get(extensionId);
            if (tmpDir) {
                yield tmpDir.cleanup();
            }
        });
    }
    getUpdateInfo(extension) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { id, version, updateUrl } = extension;
            const extQuery = querystring_1.stringify({
                id,
                v: version.number,
                installsource: 'ondemand',
                uc: '',
            });
            const checkQuery = querystring_1.stringify({
                response: 'updatecheck',
                prodversion: chromeWebStoreVersion,
                x: [extQuery],
            });
            // @ts-ignore
            const response = yield fetch(`${updateUrl}?${checkQuery}`);
            if (!response.ok) {
                throw new Error(`Http Status not ok: ${response.status} ${response.statusText}`);
            }
            const xml = yield response.text();
            return {
                xml,
            };
        });
    }
}
exports.default = DownloadProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnJvd3Nlci9mZXRjaGVyL2Rvd25sb2FkLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGFBQWE7QUFDYiwrQ0FBNEM7QUFDNUMsNkNBQW1EO0FBQ25ELDZDQUF3QztBQUl4QyxrRUFBa0M7QUFLbEMsSUFBSSxLQUF3QixDQUFDO0FBRTdCLGdDQUFnQztBQUNoQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRTtJQUNuQyxLQUFLLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDO0NBQzNDO0FBRUQsTUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFdkYsTUFBcUIsZ0JBQWdCO0lBR25DO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFSyxZQUFZLENBQUMsV0FBNkI7O1lBQzlDLE1BQU0sT0FBTyxHQUFHLE1BQU0saUJBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFFbkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXpDLE1BQU0sSUFBSSxHQUFHLE1BQU0sMkJBQVksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztZQUV4RSxPQUFPO2dCQUNMLEVBQUUsRUFBRSxXQUFXO2dCQUNmLFFBQVEsRUFBRSxJQUFJLGtCQUFRLENBQUMsSUFBSSxDQUFDO2FBQzdCLENBQUM7UUFDSixDQUFDO0tBQUE7SUFFSyxXQUFXLENBQUMsV0FBNkI7O1lBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRS9DLElBQUksTUFBTSxFQUFFO2dCQUNWLE1BQU0sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQztLQUFBO0lBRUssYUFBYSxDQUFDLFNBQXFCOztZQUN2QyxNQUFNLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxTQUFTLENBQUM7WUFFN0MsTUFBTSxRQUFRLEdBQUcsdUJBQVMsQ0FBQztnQkFDekIsRUFBRTtnQkFDRixDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU07Z0JBQ2pCLGFBQWEsRUFBRSxVQUFVO2dCQUN6QixFQUFFLEVBQUUsRUFBRTthQUNQLENBQUMsQ0FBQztZQUVILE1BQU0sVUFBVSxHQUFHLHVCQUFTLENBQUM7Z0JBQzNCLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixXQUFXLEVBQUUscUJBQXFCO2dCQUNsQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7YUFDZCxDQUFDLENBQUM7WUFFSCxhQUFhO1lBQ2IsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxTQUFTLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQztZQUUzRCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRTtnQkFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQzthQUNsRjtZQUVELE1BQU0sR0FBRyxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRWxDLE9BQU87Z0JBQ0wsR0FBRzthQUNKLENBQUM7UUFDSixDQUFDO0tBQUE7Q0FDRjtBQXpERCxtQ0F5REMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBkb3dubG9hZEJ5SWQgfSBmcm9tICdkb3dubG9hZC1jcngnO1xuaW1wb3J0IHsgZGlyLCBEaXJlY3RvcnlSZXN1bHQgfSBmcm9tICd0bXAtcHJvbWlzZSc7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICdxdWVyeXN0cmluZyc7XG5cbmltcG9ydCB7IElFeHRlbnNpb24gfSBmcm9tICcuLi8uLi9jb21tb24vdHlwZXMnO1xuXG5pbXBvcnQgTG9jYXRpb24gZnJvbSAnLi9sb2NhdGlvbic7XG5pbXBvcnQge1xuICBJRG93bmxvYWRQcm92aWRlcixcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmxldCBmZXRjaDogUHJvbWlzZTxSZXNwb25zZT47XG5cbi8vIHJlcXVpcmUgZWxlY3Ryb24gbWFpbiBjb250ZXh0XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0Jykge1xuICBmZXRjaCA9IHJlcXVpcmUoJ2VsZWN0cm9uLWZldGNoJykuZGVmYXVsdDtcbn1cblxuY29uc3QgY2hyb21lV2ViU3RvcmVWZXJzaW9uID0gcHJvY2Vzcy52ZXJzaW9ucy5jaHJvbWUuc3BsaXQoJy4nKS5zbGljZSgwLCAyKS5qb2luKCcuJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvd25sb2FkUHJvdmlkZXIgaW1wbGVtZW50cyBJRG93bmxvYWRQcm92aWRlciB7XG4gIHByaXZhdGUgZG93bmxvYWRzOiBNYXA8SUV4dGVuc2lvblsnaWQnXSwgRGlyZWN0b3J5UmVzdWx0PjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRvd25sb2FkcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGFzeW5jIGRvd25sb2FkQnlJZChleHRlbnNpb25JZDogSUV4dGVuc2lvblsnaWQnXSkge1xuICAgIGNvbnN0IHRlbXBEaXIgPSBhd2FpdCBkaXIoeyBwcmVmaXg6ICdlY3gtJywgdW5zYWZlQ2xlYW51cDogdHJ1ZSB9KTtcblxuICAgIHRoaXMuZG93bmxvYWRzLnNldChleHRlbnNpb25JZCwgdGVtcERpcik7XG5cbiAgICBjb25zdCBwYXRoID0gYXdhaXQgZG93bmxvYWRCeUlkKGV4dGVuc2lvbklkLCB0ZW1wRGlyLnBhdGgsIGV4dGVuc2lvbklkKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpZDogZXh0ZW5zaW9uSWQsXG4gICAgICBsb2NhdGlvbjogbmV3IExvY2F0aW9uKHBhdGgpLFxuICAgIH07XG4gIH1cblxuICBhc3luYyBjbGVhbnVwQnlJZChleHRlbnNpb25JZDogSUV4dGVuc2lvblsnaWQnXSkge1xuICAgIGNvbnN0IHRtcERpciA9IHRoaXMuZG93bmxvYWRzLmdldChleHRlbnNpb25JZCk7XG5cbiAgICBpZiAodG1wRGlyKSB7XG4gICAgICBhd2FpdCB0bXBEaXIuY2xlYW51cCgpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFVwZGF0ZUluZm8oZXh0ZW5zaW9uOiBJRXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgeyBpZCwgdmVyc2lvbiwgdXBkYXRlVXJsIH0gPSBleHRlbnNpb247XG5cbiAgICBjb25zdCBleHRRdWVyeSA9IHN0cmluZ2lmeSh7XG4gICAgICBpZCxcbiAgICAgIHY6IHZlcnNpb24ubnVtYmVyLFxuICAgICAgaW5zdGFsbHNvdXJjZTogJ29uZGVtYW5kJyxcbiAgICAgIHVjOiAnJyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGNoZWNrUXVlcnkgPSBzdHJpbmdpZnkoe1xuICAgICAgcmVzcG9uc2U6ICd1cGRhdGVjaGVjaycsXG4gICAgICBwcm9kdmVyc2lvbjogY2hyb21lV2ViU3RvcmVWZXJzaW9uLFxuICAgICAgeDogW2V4dFF1ZXJ5XSxcbiAgICB9KTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3VwZGF0ZVVybH0/JHtjaGVja1F1ZXJ5fWApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBIdHRwIFN0YXR1cyBub3Qgb2s6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgeG1sID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHhtbCxcbiAgICB9O1xuICB9XG59XG4iXX0=